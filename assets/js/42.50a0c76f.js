(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{694:function(t,s,a){"use strict";a.r(s);var r=a(12),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-包管理工具有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-包管理工具有哪些"}},[t._v("#")]),t._v(" 1. 包管理工具有哪些？")]),t._v(" "),a("p",[t._v("​\tnpm是Node.JS的包管理工具，除此之外，社区有一些类似的包管理工具如yarn、pnpm和cnpm，以及集团内部使用的tnpm。我们在项目开发过程中通常使用以上主流包管理器生成node_modules目录安装依赖并进行依赖管理。")]),t._v(" "),a("h2",{attrs:{id:"_2-谈谈对npm发展历程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-谈谈对npm发展历程"}},[t._v("#")]),t._v(" 2. 谈谈对npm发展历程")]),t._v(" "),a("p",[t._v("​\t当我们执行npm install命令后，npm会帮助我们下载对应依赖包并解压到本地缓存，然后构造node_modules目录结构，写入依赖文件。那么，对应的包在node_modules目录内部是怎样的结构呢，npm主要经历了一下几次变化。")]),t._v(" "),a("h3",{attrs:{id:"_1-npm-v1-v2依赖嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-npm-v1-v2依赖嵌套"}},[t._v("#")]),t._v(" 1）npm v1/v2依赖嵌套")]),t._v(" "),a("h4",{attrs:{id:"_1-主要特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主要特点"}},[t._v("#")]),t._v(" 1. 主要特点")]),t._v(" "),a("p",[t._v("​\tnpm最早的版本使用了很简单的"),a("font",{attrs:{color:"orange"}},[t._v("嵌套模式")]),t._v("进行依赖管理。")],1),t._v(" "),a("h4",{attrs:{id:"_2-举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-举例"}},[t._v("#")]),t._v(" 2. 举例")]),t._v(" "),a("p",[t._v("比如我们在项目中依赖了A模块和C模块，而A模块和C模块依赖了不同版本的B模块，此时生成的node_modules目录如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231916582.png",alt:"图片"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/QRibyjewM1IBx7Dbic6nPLTMSYG0KhTEAMtTtTyhJW35dNvk2aVibhtk8DfvKtVCr7ewlsKOwhHfG2UppakSu41rQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),a("h4",{attrs:{id:"_3-存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题"}},[t._v("#")]),t._v(" 3. 存在的问题")]),t._v(" "),a("p",[t._v("​\t"),a("font",{attrs:{color:"red"}},[t._v("依赖地域（Dependency Hell）")]),t._v("： 在这种嵌套的node_modules结构，每个模块的依赖下面还会存在一个node_modules目录来存放模块依赖的依赖。这种方式虽然简单明了，但存在一些比较大的问题。如果我们在项目中增加了一个同样依赖2.0版本B的模块D，此时生成的node_modules目录便会如下所示。虽然模块A、D依赖同一个版本B，但B却重复下载安装了两遍，造成了重复的空间浪费。这便是依赖地狱问题。")],1),t._v(" "),a("h3",{attrs:{id:"_2-npm-v3扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-npm-v3扁平化"}},[t._v("#")]),t._v(" 2） npm v3扁平化")]),t._v(" "),a("h4",{attrs:{id:"_1-主要特点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主要特点-2"}},[t._v("#")]),t._v(" 1. 主要特点")]),t._v(" "),a("p",[t._v("​\tnpm v3 通过"),a("font",{attrs:{color:"red"}},[t._v("扁平化")]),t._v("的方式将子依赖项安装在主依赖项所在的目录中（hoisting提升），以减少依赖嵌套导致的深层树和冗余。")],1),t._v(" "),a("p",[t._v("​\t为了确保模块的正确加载，npm也实现了额外的依赖查找算法，核心是"),a("font",{attrs:{color:"red"}},[t._v("递归向上查找node_modules")]),t._v("。在安装新的包时，会不停往上级node_modules中查找。")],1),t._v(" "),a("p",[t._v("​\t如果找到"),a("font",{attrs:{color:"red"}},[t._v("相同版本的包就不会重新安装")]),t._v("，在遇到"),a("font",{attrs:{color:"red"}},[t._v("冲突才会在模块下的node_modules目录下存放该模块子依赖")]),t._v("，解决了大量包重复安装的问题，但也带来了额外的新问题。")],1),t._v(" "),a("h4",{attrs:{id:"_2-举例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-举例-2"}},[t._v("#")]),t._v(" 2. 举例")]),t._v(" "),a("p",[t._v("此时生成的node_modules目录如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231924251.png",alt:"图片"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231925200.png",alt:"图片"}})]),t._v(" "),a("h4",{attrs:{id:"_3-存在问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在问题"}},[t._v("#")]),t._v(" 3. 存在问题")]),t._v(" "),a("h5",{attrs:{id:"_1-幽灵依赖-phantom-dependency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-幽灵依赖-phantom-dependency"}},[t._v("#")]),t._v(" 1）幽灵依赖（Phantom dependency）")]),t._v(" "),a("p",[t._v("​\t幽灵依赖主要发生某个包"),a("font",{attrs:{color:"red"}},[t._v("未在package.json中定义，但项目中依然可以引用")]),t._v("到的情况下。")],1),t._v(" "),a("p",[t._v("考虑之前的案例，它的package.json如右图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231935343.png",alt:"图片"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231935577.png",alt:"图片"}})]),t._v(" "),a("p",[t._v("在index.js中我们可以直接require A，因为在package.json声明了该依赖，但是，我们require B也是可以正常工作的。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ???")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("因为B是A的依赖项，在安装过程中，npm会将依赖B平铺到node_modules下，因此require函数可以查找到它。但这可能会导致意想不到的问题：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"cornflowerblue"}},[t._v("依赖不兼容")]),t._v("：my-library库中并没有声明依赖B的版本，因此B的major更新对于SemVer体系是完全合法的，这就导致其他用户安装时可能会下载到与当前依赖不兼容的版本。")],1),t._v(" "),a("li",[a("font",{attrs:{color:"cornflowerblue"}},[t._v("依赖缺失")]),t._v("：我们也可以直接引用项目中devDepdency的子依赖，但其他用户安装时并不会devDepdency，这就可能导致运行时会立刻报错。")],1)]),t._v(" "),a("h5",{attrs:{id:"_2-多重依赖-doppelgangers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-多重依赖-doppelgangers"}},[t._v("#")]),t._v(" 2）多重依赖(doppelgangers)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231937368.png",alt:"图片"}})]),t._v(" "),a("p",[t._v("考虑在项目中继续引入的依赖2.0版本B的模块D与而1.0版本B的模块E，此时无论是把B 2.0还是1.0提升放在顶层，都会导致另一个版本存在重复的问题，比如这里重复的2.0。此时就会存在以下问题：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"orange"}},[t._v("破坏单例模式")]),t._v("：模块C、D中引入了模块B中导出的一个单例对象，即使代码里看起来加载的是同一模块的同一版本，但实际解析加载的是不同的module，引入的也是不同的对象。如果同时对该对象进行副作用操作，就会产生问题。")],1),t._v(" "),a("li",[a("font",{attrs:{color:"orange"}},[t._v("types冲突")]),t._v("：虽然各个package的代码不会相互污染，但是他们的types仍然可以相互影响，因此版本重复可能会导致全局的types命名冲突。")],1)]),t._v(" "),a("h5",{attrs:{id:"_3-不确定性-non-determinism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-不确定性-non-determinism"}},[t._v("#")]),t._v(" 3）不确定性（Non-Determinism）")]),t._v(" "),a("p",[t._v("​\t在前端包管理的背景下，确定性指在给定package.json下，无论在何种环境下执行npm install命令都能得到相同的node_modules目录结构。然而"),a("font",{attrs:{color:"red"}},[t._v("npm v3是不确定性的，它node_modules目录以及依赖树结构取决于用户安装的顺序。")])],1),t._v(" "),a("p",[t._v("考虑项目拥有以下依赖树结构，其npm install产生的node_modules目录结构如右图所示。\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231939633.png",alt:"图片"}}),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231939813.png",alt:"图片"}}),t._v("\n假设当用户使用npm手动升级了模块A到2.0版本，导致其依赖的模块B升级到了2.0版本，此时的依赖树结构如下。\n"),a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/QRibyjewM1IBx7Dbic6nPLTMSYG0KhTEAM1jiaL8iaCQLz4vk44aQia5IkyKLfMyCxDGknLtoibwQGzsplS0XIJXUMAw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231939630.png",alt:"图片"}}),t._v("\n此时完成开发，将项目部署至服务器，重新执行npm install，此时提升的子依赖B版本发生了变化，产生的node_modules目录结构将会与用户本地开发产生的结构不同，如下图所示。如果需要node_modules目录结构一致，就需要在package.json修改时删除node_modules结构并重新执行npm install。\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231939250.png",alt:"图片"}}),a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/QRibyjewM1IBx7Dbic6nPLTMSYG0KhTEAMJhsfkT6KT5y7b5RqAcUr9b8fYkylI4VGiburHtyS8cs64rDQJibJ0ic7g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),a("h3",{attrs:{id:"_3-npm-v5扁平化-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-npm-v5扁平化-lock"}},[t._v("#")]),t._v(" 3）npm v5扁平化 + lock")]),t._v(" "),a("h4",{attrs:{id:"_1-主要特点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主要特点-3"}},[t._v("#")]),t._v(" 1. 主要特点")]),t._v(" "),a("p",[t._v("​\t在npm v5中"),a("font",{attrs:{color:"red"}},[t._v("新增了package-lock.json")]),t._v("。当项目有package.json文件并首次执行npm install安装后，会自动生成一个package-lock.json文件，该文件里面记录了package.json依赖的模块，以及模块的子依赖。并且给每个依赖"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("标明了版本、获取地址和验证模块完整性哈希值")]),t._v("。通过package-lock.json，保障了依赖包安装的确定性与兼容性，使得每次安装都会出现相同的结果。")],1),t._v(" "),a("h4",{attrs:{id:"_2-优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-优点"}},[t._v("#")]),t._v(" 2. 优点")]),t._v(" "),a("h5",{attrs:{id:"_1-一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-一致性"}},[t._v("#")]),t._v(" 1） 一致性")]),t._v(" "),a("p",[t._v("考虑上文案例，初始时安装生成package-lock.json如左图所示，depedencies对象中列出的依赖都是提升的，每个依赖项中的requires对象中为子依赖项。此时更新A依赖到2.0版本，如右图所示，并不会改变提升的子依赖版本。因此重新生成的node_modules目录结构将不会发生变化。\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231946637.png",alt:"图片"}}),a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/QRibyjewM1IBx7Dbic6nPLTMSYG0KhTEAMH6Lic7B0kmCLXU5dh7nrBOzTibD5N3Qwiacsribc1CzOjQBgTkRa2d3riaw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),a("h5",{attrs:{id:"_2-兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-兼容性"}},[t._v("#")]),t._v(" 2）兼容性")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[t._v("语义化版本（Semantic Versioning）")])],1),t._v(" "),a("p",[t._v("依赖版本兼容性就不得不提到npm使用的SemVer版本规范，版本格式如下：")]),t._v(" "),a("ul",[a("li",[t._v("主版本号："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("不兼容的 API 修改")])],1),t._v(" "),a("li",[t._v("次版本号："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("向下兼容的功能性新增")])],1),t._v(" "),a("li",[t._v("修订号："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("向下兼容的问题修正")])],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231946201.png",alt:"图片"}}),t._v("\n在使用第三方依赖时，我们通常会在package.json中指定依赖的版本范围，语义化版本范围规定：")]),t._v(" "),a("ul",[a("li",[t._v("~："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("只升级修订号")])],1),t._v(" "),a("li",[t._v("^："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("升级次版本号和修订号")])],1),t._v(" "),a("li",[t._v("*："),a("font",{attrs:{color:"cornflowerblue"}},[t._v("升级到最新版本")])],1)]),t._v(" "),a("p",[t._v("语义化版本规则定义了一种理想的版本号更新规则，希望所有的依赖更新都能遵循这个规则，但是往往会有许多依赖不是严格遵循这些规定的。因此一些依赖模块子依赖不经意的升级，可能就会导致不兼容的问题产生。因此package-lock.json给每个模块子依赖标明了确定的版本，避免不兼容问题的产生。")]),t._v(" "),a("h2",{attrs:{id:"_3-谈谈对yarn的发展历程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-谈谈对yarn的发展历程"}},[t._v("#")]),t._v(" 3. 谈谈对yarn的发展历程")]),t._v(" "),a("p",[t._v("​\tYarn 是在2016年开源的，yarn 的出现是为了解决 npm v3 中的存在的一些问题，那时 npm v5 还没发布。Yarn 被定义为快速、安全、可靠的依赖管理。")]),t._v(" "),a("h3",{attrs:{id:"_1-yarn-v1-lockfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-yarn-v1-lockfile"}},[t._v("#")]),t._v(" 1） Yarn v1 lockfile")]),t._v(" "),a("p",[t._v("Yarn 生成的 node_modules 目录结构和 npm v5 是相同的，同时默认生成一个 yarn.lock 文件。对于上文例子，生成的yarn.lock文件如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^1.0.0"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^2.0.0"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^2.0.0"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),t._v("\n  resolved "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uri"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^1.0.0"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br")])]),a("p",[t._v("可以看到yarn.lock使用自定义格式而不是JSON，并将所有依赖都放在顶层，给出的理由是便于阅读和审查，减少合并冲突。")]),t._v(" "),a("h3",{attrs:{id:"_2-yarn-v2-plug-n-play"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-yarn-v2-plug-n-play"}},[t._v("#")]),t._v(" 2）Yarn v2 Plug'n'Play")]),t._v(" "),a("p",[t._v("​\t在Yarn 的2.x版本重点推出了Plug'n'Play（PnP）零安装模式，放弃了node_modules，更加保证依赖的可靠性，构建速度也得到更大的提升。")]),t._v(" "),a("p",[t._v("​\t因为Node依赖于node_modules查找依赖，node_modules的生成会涉及到下载依赖包、解压到缓存、拷贝到本地文件目录等一系列重IO的操作，包括依赖查找以及处理重复依赖都是非常耗时操作，基于node_modules的包管理器并没有很多优化的空间。因此yarn反其道而行之，既然包管理器已经拥有了项目依赖树的结构，那也可以直接"),a("font",{attrs:{color:"orange"}},[t._v("由包管理器通知解释器包在磁盘上的位置并管理依赖包版本与子依赖关系")]),t._v("。")],1),t._v(" "),a("p",[t._v("​\t执行"),a("code",[t._v("yarn --pnp")]),t._v("模式即可开启PnP模式。在PnP模式，yarn 会生成 .pnp.cjs 文件代替node_modules。该文件"),a("font",{attrs:{color:"orange"}},[t._v("维护了依赖包到磁盘位置与子依赖项列表的映射")]),t._v("。同时 .pnp.js 还实现了resolveRequest方法处理require请求，该方法会直接根据映射表确定依赖在文件系统中的位置，从而"),a("font",{attrs:{color:"orange"}},[t._v("避免了在node_modules查找依赖的 I/O 操作。")])],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231953531.png",alt:"图片"}}),t._v("\npnp模式优缺点也非常明显：")]),t._v(" "),a("ul",[a("li",[t._v("优：摆脱node_modules，安装、模块速度加载快；所有 npm 模块都会存放在全局的缓存目录下，避免多重依赖；严格模式下子依赖不会提升，也避免了幽灵依赖（但这可能会导致某些包出现问题，因此也支持了依赖提升的宽松模式:<）。")]),t._v(" "),a("li",[t._v("缺：自建resolver 处理Node require方法，执行Node文件需要通过yarn node解释器执行，脱离Node现存生态，兼容性不太好")])]),t._v(" "),a("h2",{attrs:{id:"_4-谈谈对pnpm的了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-谈谈对pnpm的了解"}},[t._v("#")]),t._v(" 4. 谈谈对pnpm的了解")]),t._v(" "),a("p",[t._v("​\tpnpm1.0于2017年正式发布，pnpm具有安装速度快、节约磁盘空间、安全性好等优点，它的出现也是为了解决npm和yarn存在的问题。")]),t._v(" "),a("p",[t._v("​\t因为在基于npm或yarn的扁平化node_modules的结构下，虽然解决了"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("依赖地狱、一致性与兼容性")]),t._v("的问题，但"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("多重依赖和幽灵依赖")]),t._v("并没有好的解决方式。因为在不考虑循环依赖的情况下，实际的"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("依赖结构图为有向无环图(DAG)")]),t._v("，但是npm和yarn通过文件目录和node resolve算法模拟的实际上是"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("有向无环图的一个超集")]),t._v("（多出了很多错误祖先节点和兄弟节点之间的链接），这导致了很多的问题。pnpm也是通过"),a("font",{attrs:{color:"orange"}},[t._v("硬链接与符号链接结合")]),t._v("的方式，更加精确的模拟DAG来解决yarn和npm的问题。")],1),t._v(" "),a("h3",{attrs:{id:"_1、非扁平化的node-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、非扁平化的node-modules"}},[t._v("#")]),t._v(" 1、非扁平化的node_modules")]),t._v(" "),a("p",[t._v("####1) "),a("strong",[t._v("硬链接(hard link)")])]),t._v(" "),a("p",[t._v("​\t硬链接可以理解为源文件的副本，使得用户可以通过不同的路径引用方式去找到某个文件，他和源文件一样的大小但是事实上却不占任何空间。pnpm 会在全局 "),a("font",{attrs:{color:"cornflowerblue"}},[t._v("store 目录")]),t._v("里存储项目 node_modules 文件的硬链接。硬链接可以使得不同的项目可以从全局 store 寻找到同一个依赖，大大节省了"),a("font",{attrs:{color:"cornflowerblue"}},[t._v("磁盘空间")]),t._v("。")],1),t._v(" "),a("h4",{attrs:{id:"_2-符号链接-symbolic-link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-符号链接-symbolic-link"}},[t._v("#")]),t._v(" 2) 符号链接(symbolic link)")]),t._v(" "),a("p",[t._v("软链接可以理解为快捷方式，pnpm在引用依赖时通过符号链接去找到对应磁盘目录（.pnpm）下的依赖地址。考虑在项目中安装依赖于foo模块的bar模块，生成的node_modules目录如下所示。\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231955705.png",alt:"图片"}}),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231955768.png",alt:"图片"}}),t._v("\n可以看到node_modules下的bar目录下并没有node_modules，这是一个符号链接，实际真正的文件位于.pnpm目录中对应的 "),a("code",[t._v("<package-name>@version/node_modules/<package-name>")]),t._v("目录并硬链接到全局store中。而bar的依赖存在于.pnpm目录下"),a("code",[t._v("<package-name>@version/node_modules")]),t._v("目录下，而这也是软链接到"),a("code",[t._v("<package-name>@version/node_modules/<package-name>")]),t._v("目录并硬链接到全局store中。")]),t._v(" "),a("p",[t._v("而这种嵌套node_modules结构的好处在于只有真正在依赖项中的包才能访问，避免了使用扁平化结构时所有被提升的包都可以访问，很好地解决了幽灵依赖的问题。此外，因为依赖始终都是存在store目录下的硬链接，相同的依赖始终只会被安装一次，多重依赖的问题也得到了解决。")]),t._v(" "),a("p",[t._v("官网上的这张图清晰地解释了pnpm的依赖管理机制\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231955925.png",alt:"图片"}})]),t._v(" "),a("h3",{attrs:{id:"_2、局限性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、局限性"}},[t._v("#")]),t._v(" 2、局限性")]),t._v(" "),a("p",[t._v("看起来pnpm似乎很好地解决了问题，但也存在一些局限。")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red"}},[t._v("忽略了 package-lock.json")]),t._v("。npm 的锁文件旨在反映平铺的 node_modules 布局，但是 pnpm 默认创建隔离布局，无法由 npm 的锁文件格式反映出来，而是使用自身的锁文件pnpm-lock.yaml。")],1),t._v(" "),a("li",[a("font",{attrs:{color:"red"}},[t._v("符号链接兼容性")]),t._v("。存在符号链接不能适用的一些场景，比如 Electron 应用、部署在 lambda 上的应用无法使用 pnpm。")],1),t._v(" "),a("li",[t._v("子依赖提升到同级的目录结构，虽然由于 Node.js 的父目录上溯寻址逻辑，可以实现兼容。但对于类似 Egg、Webpack 的插件加载逻辑，在用到相对路径的地方，需要去适配。")]),t._v(" "),a("li",[a("font",{attrs:{color:"red"}},[t._v("不同应用的依赖是硬链接到同一份文件")]),t._v("，如果在调试时修改了文件，有可能会无意中影响到其他项目。")],1)]),t._v(" "),a("h2",{attrs:{id:"_5-谈谈对cnpm和tnpm的了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-谈谈对cnpm和tnpm的了解"}},[t._v("#")]),t._v(" 5. 谈谈对cnpm和tnpm的了解")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/QRibyjewM1IBx7Dbic6nPLTMSYG0KhTEAM3UQlZLeZNu7WSvVNtABR02JMDbUAVFcTDvSibhlgYxWexbdKTrBm4wg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v("\ncnpm是由阿里维护并开源的npm国内镜像源，支持官方 npm registry 的镜像同步。tnpm是在cnpm基础之上，专为阿里巴巴经济体的同学服务，提供了私有的 npm 仓库，并沉淀了很多 Node.js 工程实践方案。")]),t._v(" "),a("p",[t._v("​\tcnpm/tnpm的依赖管理是借鉴了pnpm ，通过符号链接方式创建非扁平化的node_modules结构，最大限度提高了安装速度。安装的依赖包都是在 node_modules 文件夹以包名命名，然后再做符号链接到 版本号 @包名的目录下。与pnpm不同的是，cnpm没有使用硬链接，也未把子依赖符号链接到单独目录进行隔离。\n"),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231955408.png",alt:"图片"}}),a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203231955486.png",alt:"图片"}}),t._v("\n此外，tnpm新推出的rapid模式使用用户态文件系统（FUSE)对依赖管理做了一些新的优化。FUST类似于文件系统版的 ServiceWorker，通过 FUSE 可以接管一个目录的文件系统操作逻辑。基于此实现非扁平化的node_modules结构可以解决软链接的兼容性问题。限于篇幅原因这里不再详述，感兴趣可以移步真·深入浅出 tnpm rapid 模式 - 如何比 pnpm 快 10 秒。")]),t._v(" "),a("h2",{attrs:{id:"_6-yarn-lock-vs-npm-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-yarn-lock-vs-npm-lock"}},[t._v("#")]),t._v(" 6. Yarn lock vs. npm lock")]),t._v(" "),a("ul",[a("li",[a("p",[a("font",{attrs:{color:"red"}},[t._v("文件格式不同")]),t._v("，npm v5 使用的是 json 格式，yarn 使用的是自定义格式")],1)]),t._v(" "),a("li",[a("p",[t._v("package-lock.json 文件里记录的依赖的版本都是确定的，不会出现"),a("font",{attrs:{color:"red"}},[t._v("语义化版本范围符号")]),t._v("(~ ^ *)，而 yarn.lock 文件里仍然会出现语义化版本范围符号")],1)]),t._v(" "),a("li",[a("p",[t._v("package-lock.json "),a("font",{attrs:{color:"red"}},[t._v("文件内容更丰富")]),t._v("，实现了更密集的锁文件，包括子依赖的提升信息")],1)]),t._v(" "),a("li",[a("ul",[a("li",[t._v("npm v5 只需要 package.lock 文件就可以确定 node_modules 目录结构")]),t._v(" "),a("li",[t._v("yarn.lock 无法确定顶层依赖，需要 package.json 和 yarn.lock 两个文件才能确定 node_modules 目录结构。node_modules 目录中 package 的位置是在 yarn 的内部计算出来的，在使用不同版本的 yarn 时可能会引起不确定性。")])])])]),t._v(" "),a("h2",{attrs:{id:"_7-运行npm-run-xxx的时候发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-运行npm-run-xxx的时候发生了什么"}},[t._v("#")]),t._v(" 7. 运行"),a("code",[t._v("npm run xxx")]),t._v("的时候发生了什么？")]),t._v(" "),a("ol",[a("li",[t._v("运行"),a("code",[t._v("npm run xxx")]),t._v("的时候，npm会在当前目录的"),a("code",[t._v("node_modules/.bin")]),t._v("查找要执行的程序，如果找到则执行")]),t._v(" "),a("li",[t._v("没有找到则从全局的"),a("code",[t._v("node_modules/.bin")]),t._v("中查找，"),a("code",[t._v("npm i -g xxx")]),t._v("就是安装到全局目录")]),t._v(" "),a("li",[t._v("如果全局目录还是没有找到，那么就从"),a("code",[t._v("path")]),t._v("环境变量中查找有没有其他同名的可执行程序")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/vcwgJ-5bkblNmZp5Iz4bxw",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于依赖管理的真相 — 前端包管理器探究"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/7078924628525056007",target:"_blank",rel:"noopener noreferrer"}},[t._v("三面面试官：运行 npm run xxx 的时候发生了什么？"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);