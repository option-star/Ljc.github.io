(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{719:function(t,a,_){"use strict";_.r(a);var s=_(12),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_0-开端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_0-开端"}},[t._v("#")]),t._v(" 0 开端")]),t._v(" "),_("ul",[_("li",[t._v("20 世纪 60 年代，美国国防部高等研究计划署（ARPA）建立了 ARPA 网，这被认为是互联网的起源。")]),t._v(" "),_("li",[t._v("70 年代，研究人员基于对 ARPA 网的实践和思考，发明出了著名的 TCP/IP 协议。该协议具有良好的分层结构和稳定的性能")]),t._v(" "),_("li",[t._v("80 年代中期进入了 UNIX 系统内核，促使更多的计算机接入了网络。")]),t._v(" "),_("li",[t._v("1989 年，蒂姆伯纳斯-李博士发表了一篇论文，提出了在互联网上构建超链接文档系统的构想。在篇文章中他确立了三项关键技术：URI、HTML、HTTP。基于这三项技术，可以把超文本系统完美地运行在互联网上，李博士把这个系统称为“万维网”（World Wide Web）。")])]),t._v(" "),_("img",{staticStyle:{zoom:"150%"},attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916753.webp",alt:"图片描述"}}),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916444.jpeg",alt:"img"}})]),t._v(" "),_("h2",{attrs:{id:"_1-http0-9"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-http0-9"}},[t._v("#")]),t._v(" 1. HTTP0.9")]),t._v(" "),_("h3",{attrs:{id:"_1-1-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-简介"}},[t._v("#")]),t._v(" 1.1 简介")]),t._v(" "),_("p",[t._v("​\t\t1991 年 HTTP（HyperText Transfer Protocol，超文本传输协议）正式诞生，当时的版本是 0.9。其主"),_("strong",[t._v("要用于学术交流，在网络之间传输体积很小的HTML文件。协议定义了客户端发起请求、服务端响应请求的通信模式")])]),t._v(" "),_("h3",{attrs:{id:"_1-2-请求流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-请求流程"}},[t._v("#")]),t._v(" 1.2 请求流程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916997.webp",alt:"http/0.9请求流程"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916141.png",alt:"img"}})]),t._v(" "),_("ol",[_("li",[t._v("首先客户端根据IP地址、端口和服务器建立TCP连接，而建立连接的过程就是TCP协议三次握手的过程。")]),t._v(" "),_("li",[t._v("建立好连接后，客户端会发送一个GET请求行的信息， 如"),_("code",[t._v("GET /index.html")]),t._v(" 用来获取index.html")]),t._v(" "),_("li",[t._v("服务器接受请求信息后，读取对应的HTML文件，并将连接以ASCII字符流返回给客户端")]),t._v(" "),_("li",[t._v("HTML文档传输完成后，断开连接")])]),t._v(" "),_("h3",{attrs:{id:"_1-3-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-特点"}},[t._v("#")]),t._v(" 1.3 特点")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("只有一个请求行，没有HTTP请求头和请求体")])]),t._v(" "),_("li",[_("strong",[t._v("服务器也没有返回头信息")])]),t._v(" "),_("li",[_("strong",[t._v("返回的内容是以ASCII字符流来传输的")]),t._v("（因为都是HTML格式文件，且ASCII编码范围为0 ~127,  一个字符即可表示，用ASCII来传输节省空间）")])]),t._v(" "),_("h3",{attrs:{id:"_1-4-瓶颈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-瓶颈"}},[t._v("#")]),t._v(" 1.4 瓶颈")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("只支持HTML文件")]),t._v("： 传输文件类型只支持HTML文件")]),t._v(" "),_("li",[_("strong",[t._v("局限于ASCII编码")]),t._v(" ：文件格式仅局限于ASCII编码")])]),t._v(" "),_("h2",{attrs:{id:"_2-http1-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-http1-0"}},[t._v("#")]),t._v(" 2. HTTP1.0")]),t._v(" "),_("h3",{attrs:{id:"_2-1-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-介绍"}},[t._v("#")]),t._v(" 2.1 介绍")]),t._v(" "),_("p",[t._v("​\t\t为 了满足传输多种类型文件的需求， "),_("strong",[t._v("HTTP/1.0核心改变就是引入头部设定")]),t._v("，头部内容以键值对的形式设置，在HTTP发送请求时，会带上请求头信息，服务器返回数据时，会先返回响应头信息。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916058.webp",alt:"http/1.0请求流程"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070916077.jpeg",alt:"preview"}})]),t._v(" "),_("h3",{attrs:{id:"_2-2-请求体-响应体"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-请求体-响应体"}},[t._v("#")]),t._v(" 2.2 请求体/响应体")]),t._v(" "),_("p",[_("strong",[t._v("请求头")]),t._v("：")]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("accept")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 期待服务器返回html类型的文件")]),t._v("\naccept"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("encoding"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" gzip"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deflate"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" br "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 期待服务器可以采用gzip、deflate、br其中一种压缩方式")]),t._v("\naccept"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Charset"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ISO")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8859")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("utf"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 期待返回的文件编码是 ISO-8859-1或utf-8")]),t._v("\naccept"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("language"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zh "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 期望⻚面的优先语言是中文")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("p",[_("strong",[t._v("响应头")]),t._v("：")]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[t._v("content"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("encoding"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" br "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示服务器采用了br的压缩方式")]),t._v("\ncontent"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("type"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UTF")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务器返回的是html文件，并且该文件的编码类型是UTF-8")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("h3",{attrs:{id:"_2-3-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-特点"}},[t._v("#")]),t._v(" 2.3 特点")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[t._v("​\t\t头部字段不仅用于解决不同类型文件传输的问题，也可以实现其他很多功能。")])]),_("ul",[_("li",[t._v("为了支持多种类型文件，浏览器需要知道返回的数据类型")]),t._v(" "),_("li",[t._v("为了减轻传输性能，支持压缩后传输")]),t._v(" "),_("li",[t._v("为了提供国际化的支持，浏览器需要指明需要的语言版本")]),t._v(" "),_("li",[t._v("为了准确读取文件，浏览器需要知道文件的编码类型")]),t._v(" "),_("li",[t._v("为了告诉浏览器服务器最终处理该请求的情况，引入状态码")]),t._v(" "),_("li",[t._v("为了减轻服务器的压力，提供Cache机制，用来缓存已经下载过的数据")]),t._v(" "),_("li",[t._v("为了方便服务器统计客户端的基本信息，在请求头中加入用户代理User Agent字段")])]),t._v(" "),_("h3",{attrs:{id:"_2-4-瓶颈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-瓶颈"}},[t._v("#")]),t._v(" 2.4 瓶颈")]),t._v(" "),_("h4",{attrs:{id:"_1-短连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-短连接"}},[t._v("#")]),t._v(" 1）短连接")]),t._v(" "),_("p",[t._v("​\t每一次进行HTTP通信，都需要建立TCP链接、传输HTTP数据和断开TCP连接三个阶段，会增加大量无畏的开销")]),t._v(" "),_("h4",{attrs:{id:"_2-对头阻塞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-对头阻塞"}},[t._v("#")]),t._v(" 2）对头阻塞")]),t._v(" "),_("p",[t._v("​\t只有前面请求的返回之后才能进行下一次请求，如果某个请求没有及时返回，会引起队头阻塞")]),t._v(" "),_("h4",{attrs:{id:"_3-服务器只支持一个域名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务器只支持一个域名"}},[t._v("#")]),t._v(" 3）服务器只支持一个域名")]),t._v(" "),_("p",[t._v("​\t 每个域名绑定一个唯一的IP地址，因此一个服务器只能支持一个域名")]),t._v(" "),_("h4",{attrs:{id:"_4-无法接收动态生成的内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-无法接收动态生成的内容"}},[t._v("#")]),t._v(" 4）无法接收动态生成的内容")]),t._v(" "),_("p",[t._v("​\t需要在响应头中设置完整的数据大小（"),_("code",[t._v("Content-Length")]),t._v("），浏览器根据设置的数据大小来接受数据，这种方式对于接受动态生成的内容无能为力")]),t._v(" "),_("h4",{attrs:{id:"_5-不支持断点续存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-不支持断点续存"}},[t._v("#")]),t._v(" 5）不支持断点续存")]),t._v(" "),_("p",[t._v("​\t 存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续存")]),t._v(" "),_("h2",{attrs:{id:"_3-http1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-http1-1"}},[t._v("#")]),t._v(" 3 HTTP1.1")]),t._v(" "),_("h3",{attrs:{id:"_3-1-优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-优点"}},[t._v("#")]),t._v(" 3.1 优点")]),t._v(" "),_("h4",{attrs:{id:"_1-长链接-核心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-长链接-核心"}},[t._v("#")]),t._v(" 1）长链接（核心）")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.0")]),t._v(": 每进行一次通信，都需要经历建立连接、传输数据和断开数据三个阶段。当一个页面引入了较多外部文件时，这个建立连接和断开连接的过程就会增加大量网络开销。")]),t._v(" "),_("p",[_("strong",[t._v("HTTP/1.1")]),t._v(": 默认使用的是持久连接，这种好处就是减少了TCP的连接的重复建立与断开所造成的额外开销，减轻了服务端的开销。")]),t._v(" "),_("p",[t._v("即HTTP1.1中的"),_("code",[t._v("Connection： keep-alive")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070917582.jpeg",alt:"img"}})]),t._v(" "),_("h4",{attrs:{id:"_2-管道网络传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-管道网络传输"}},[t._v("#")]),t._v(" 2）管道网络传输")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.0")]),t._v(": 队头阻塞")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.1")]),t._v(": 引入管道机制，一个TCP连接，可以同时发送多个请求。（响应的顺序必须和请求的顺序一致，因此不常用，FirFox和Chrome已经放弃），但是"),_("strong",[t._v("服务器必须按照接收请求的顺序发送对这些管道化请求的响应")]),t._v("。所以HTTP/1.1管道解决了请求得队头阻塞，但是没有解决响应得队头阻塞。")]),t._v(" "),_("h4",{attrs:{id:"_3-并发连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-并发连接"}},[t._v("#")]),t._v(" 3）并发连接")]),t._v(" "),_("p",[t._v("​\t通过使用CDN实现域名分片机制，对于一个域名的请求允许分配多个长连接，减轻了整个资源的下载时间")]),t._v(" "),_("h4",{attrs:{id:"_4-支持动态内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-支持动态内容"}},[t._v("#")]),t._v(" 4） 支持动态内容")]),t._v(" "),_("p",[t._v("​\t\tHTTP/1.1通过引入Chunktransfer(分块传输编码)机制，服务器会将数据分割成若干个任意大小的数据块,毎个数据块发送时会附上数据块的长度,最后使用一个零长度的块作为发送数据完成的标志,这样就提供了对动态内容的支持")]),t._v(" "),_("h4",{attrs:{id:"_5-引入客户端cookie、安全机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-引入客户端cookie、安全机制"}},[t._v("#")]),t._v(" 5） 引入客户端Cookie、安全机制")]),t._v(" "),_("h4",{attrs:{id:"_6-带宽优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-带宽优化"}},[t._v("#")]),t._v(" 6） 带宽优化")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.0")]),t._v("：例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.1")]),t._v("：在请求头引入了range头域,它允许只请求资源的某个部分,即返回码是206( Partial Content)")]),t._v(" "),_("h4",{attrs:{id:"_7-缓存处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-缓存处理"}},[t._v("#")]),t._v(" 7）缓存处理")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.0")]),t._v("：主要使用"),_("code",[t._v("header")]),t._v("里的"),_("code",[t._v("If-Modified-Since")]),t._v(","),_("code",[t._v("Expires")]),t._v("来做为缓存判断的标准")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.1")]),t._v("：引入了更多的缓存控制策略。例如"),_("code",[t._v("Entity tag")]),t._v("，"),_("code",[t._v("If-Unmodified-Since")]),t._v(", "),_("code",[t._v("If-Match")]),t._v(", "),_("code",[t._v("If-None-Match")]),t._v("等更多可供选择的缓存头来控制缓存策略。")]),t._v(" "),_("h4",{attrs:{id:"_8-错误通知的管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-错误通知的管理"}},[t._v("#")]),t._v(" 8） 错误通知的管理")]),t._v(" "),_("p",[t._v("​\t\t新增了24个错误状态响应码")]),t._v(" "),_("ul",[_("li",[t._v("409(Conflict)表示请求的资源与资源的当前状态发生冲突;")]),t._v(" "),_("li",[t._v("410(Gone)表示服务器上的某个资源被永久性的删除。")]),t._v(" "),_("li",[t._v("414 : 表示客户端请求中所包含的URL地址太长")])]),t._v(" "),_("h4",{attrs:{id:"_9-添加host头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-添加host头"}},[t._v("#")]),t._v(" 9） 添加host头")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.0")]),t._v(": 每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（"),_("code",[t._v("hostname")]),t._v("）。")]),t._v(" "),_("p",[_("strong",[t._v("HTTP1.1")]),t._v(": 随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（"),_("code",[t._v("Multi-homed Web Servers")]),t._v("），并且它们共享一个IP地址。在请求头中增加了Host字段,用来表示当前的域名地址,从而使服务器就可以根据不同的Host值做不同的处理")]),t._v(" "),_("h3",{attrs:{id:"_3-2-缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-缺点"}},[t._v("#")]),t._v(" 3.2 缺点")]),t._v(" "),_("h4",{attrs:{id:"_1-tcp的慢启动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp的慢启动"}},[t._v("#")]),t._v(" 1）TCP的慢启动")]),t._v(" "),_("p",[t._v("​\t\tTCP慢启动带来性能问题的原因是因为一些关键资源文件不大，但是慢启动会慢慢加快放数据的速度，所以小文件花费的时间也比较长")]),t._v(" "),_("h4",{attrs:{id:"_2-无请求优先级控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-无请求优先级控制"}},[t._v("#")]),t._v(" 2）无请求优先级控制")]),t._v(" "),_("p",[t._v("​\t\t同时开启多条TCP连接，这些TCP连接之间不会协商资源的优先级，竞争固定的带宽，可能会影响关键资源的下载。")]),t._v(" "),_("h4",{attrs:{id:"_3-对头阻塞问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-对头阻塞问题"}},[t._v("#")]),t._v(" 3）对头阻塞问题")]),t._v(" "),_("p",[t._v("​\t一条TCP连接中同一时刻只能处理一个请求。在当前的请求还没结束之前，其他的请求只能处于阻塞状态，这种情况被称为 "),_("strong",[t._v("队头阻塞")])]),t._v(" "),_("h4",{attrs:{id:"_4-头部未压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-头部未压缩"}},[t._v("#")]),t._v(" 4）头部未压缩")]),t._v(" "),_("p",[t._v("​\t请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 "),_("code",[t._v("Body")]),t._v(" 的部分；")]),t._v(" "),_("h2",{attrs:{id:"_4-http2-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-http2-0"}},[t._v("#")]),t._v(" 4 HTTP2.0")]),t._v(" "),_("h3",{attrs:{id:"_4-1-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-特点"}},[t._v("#")]),t._v(" 4.1 特点")]),t._v(" "),_("h4",{attrs:{id:"_1-二进制分帧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-二进制分帧"}},[t._v("#")]),t._v(" 1）二进制分帧")]),t._v(" "),_("p",[t._v("​\tHTTP/2不再像HTTP/1.1里纯文本形式的报文，而是全面采用了 "),_("strong",[t._v("二进制格式")]),t._v("。头信息和数据体都是二进制，并且统称为帧（frame）: "),_("strong",[t._v("头信息帧")]),t._v("和"),_("strong",[t._v("数据帧")]),t._v("。")]),t._v(" "),_("p",[t._v("​\t\t客户端在发送请求时会将每个请求的内容封装成不同的带有编号的二进制帧（Frame），然后将这些帧同时发送给服务端。服务端接收到数据之后，会将相同编号的帧合并为完整的请求信息。同样，服务端返回结果、客户端接收结果也遵循这个帧的拆分与组合的过程。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204111205194.png",alt:"HTTP/1 与 HTTP/2 "}})]),t._v(" "),_("h4",{attrs:{id:"_2-多路复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-多路复用"}},[t._v("#")]),t._v(" 2）多路复用")]),t._v(" "),_("p",[t._v("​\tHTTP/2是可以在一个连接中并发多个请求或回应，而不用按照顺序一一对应。降低了延迟，大幅提高了连接的利用率。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204111206752.webp",alt:"图片描述"}})]),t._v(" "),_("h4",{attrs:{id:"_3-设置请求优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置请求优先级"}},[t._v("#")]),t._v(" 3）设置请求优先级")]),t._v(" "),_("p",[t._v("​\t\t在发送请求时，标上请求的优先级，服务器在接受到请求后会优先处理优先级高的请求。0: 表示最高优先级，2的31次方-1表示最低优先级")]),t._v(" "),_("h4",{attrs:{id:"_4-服务端推送"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务端推送"}},[t._v("#")]),t._v(" 4） 服务端推送")]),t._v(" "),_("blockquote",[_("p",[t._v("介绍")])]),t._v(" "),_("p",[t._v("​\t\t服务端可以根据客户端的请求，提前返回多个响应，推送额外的资源给客户端。当客户端想获取其他资源可从缓存中获取。")]),t._v(" "),_("blockquote",[_("p",[t._v("过程")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("PUSH_PROMISE")]),t._v("帧是服务端向客户端有意推送资源的信号。")]),t._v(" "),_("li",[t._v("如果客户端不需要服务端"),_("code",[t._v("Push")]),t._v("，可在 "),_("code",[t._v("SETTINGS")]),t._v("帧中设定服务端流的值为0，禁用此功能")]),t._v(" "),_("li",[_("code",[t._v("PUSH_PROMISE")]),t._v("帧中只包含预推送资源的首部。如果客户端对"),_("code",[t._v("PUSH PROMISE")]),t._v("帧没有意见，服务端在 "),_("code",[t._v("PUSH PROMISE")]),t._v("帧后发送响应的"),_("code",[t._v("DATA")]),t._v("帧开始推送资源。如果客户端已经缓存该资源,不需要再推送,可以选择拒绝 "),_("code",[t._v("PUSH PROMISE")]),t._v("帧。")])]),t._v(" "),_("blockquote",[_("p",[t._v("限制")])]),t._v(" "),_("ul",[_("li",[t._v("所有推送的资源必须遵守同源策略")]),t._v(" "),_("li",[_("code",[t._v("PUSH_PROMISE")]),t._v("必须遵循请求-响应原则，只能借着对请求的相应推送资源。")]),t._v(" "),_("li",[_("code",[t._v("PUSH_PROMISE")]),t._v("帧必须在返回响应之前发送，以免客户端出现竞态条件")])]),t._v(" "),_("h4",{attrs:{id:"_5-首部压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-首部压缩"}},[t._v("#")]),t._v(" 5）首部压缩")]),t._v(" "),_("p",[t._v("​\tHTTP/2 会压缩头部，如果你同时发出多个请求，它们的头部信息时一样的或是相似的，那么，协议会帮你"),_("strong",[t._v("消除重复的部分")]),t._v("。")]),t._v(" "),_("p",[t._v("​\t这就是所谓的"),_("code",[t._v("HPACK")]),t._v("算法：在客户端和服务器同时维护一张头部信息表，所有字段都会存入这个表，生成索引号，以后就不发同样字段了，只发索引号，这样就提高"),_("strong",[t._v("速度")]),t._v("了。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-瓶颈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-瓶颈"}},[t._v("#")]),t._v(" 4.2 瓶颈")]),t._v(" "),_("h4",{attrs:{id:"_1-tcp队头阻塞问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp队头阻塞问题"}},[t._v("#")]),t._v(" 1）TCP队头阻塞问题")]),t._v(" "),_("p",[t._v("​\t\tHTTP/2 多个请求跑在一个 TCP 连接中，如果序列号较低的 TCP 段在网络传输中丢失了，即使序列号较高的 TCP 段已经被接收了，应用层也无法从内核中读取到这部分数据，从 HTTP 视角看，就是多个请求被阻塞了；")]),t._v(" "),_("h4",{attrs:{id:"_2-tcp建立连接的延时"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp建立连接的延时"}},[t._v("#")]),t._v(" 2）TCP建立连接的延时")]),t._v(" "),_("p",[t._v("​\t\t发起 HTTP 请求时，需要经过 TCP 三次握手（1.5RTT）和 TLS 四次握手（2个RTT）的过程，因此共需要 3.5个 RTT 的时延才能发出请求数据。")]),t._v(" "),_("p",[t._v('​\t另外， TCP 由于具有「拥塞控制」的特性，所以刚建立连接的 TCP 会有个「慢启动」的过程，它会对 TCP 连接产生"减速"效果。')]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070917739.jpeg",alt:"图片"}})]),t._v(" "),_("h4",{attrs:{id:"_3-网络迁移需要重新链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络迁移需要重新链接"}},[t._v("#")]),t._v(" 3） 网络迁移需要重新链接")]),t._v(" "),_("p",[t._v("​\t移动设备从4G网络环境切换到WIFI时，由于TCP是基于四元组（源IP地址，源端口，目标IP地址，目标端口）来确认一条TCP链接的，那么网络环境变换后，就会导致IP地址或端口变换，于是TCP只能断开连接，然后重新建立连接，切换网络环境成本高。")]),t._v(" "),_("p",[t._v("​\t总之，在传输数据之前，我们需要花掉 3～4 个 RTT。如果浏览器和服务器的物理距离较近，那么 1 个 RTT 的时间可能在 10 毫秒以内，也就是说总共要消耗掉 30～40 毫秒。这个时间也许用户还可以接受，但如果服务器相隔较远，那么 1 个 RTT 就可能需要 100 毫秒以上了，这种情况下整个握手过程需要 300～400 毫秒，这时用户就能明显地感受到“慢”了。")]),t._v(" "),_("h2",{attrs:{id:"_5-http3-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-http3-0"}},[t._v("#")]),t._v(" 5 HTTP3.0")]),t._v(" "),_("h3",{attrs:{id:"_5-1-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-简介"}},[t._v("#")]),t._v(" 5.1 简介")]),t._v(" "),_("p",[t._v("​\t我们深知，UDP 是一个简单、不可靠的传输协议，而且是 UDP 包之间是无序的，也没有依赖关系。")]),t._v(" "),_("p",[t._v("而且，UDP 是不需要连接的，也就不需要握手和挥手的过程，所以天然的就比 TCP 快。")]),t._v(" "),_("p",[t._v("当然，HTTP/3 不仅仅只是简单将传输协议替换成了 UDP，还基于 UDP 协议在「应用层」实现了 "),_("strong",[t._v("QUIC 协议")]),t._v("，它具有类似 TCP 的连接管理、拥塞窗口、流量控制的网络特性，相当于将不可靠传输的 UDP 协议变成“可靠”的了，所以不用担心数据包丢失的问题。")]),t._v(" "),_("h3",{attrs:{id:"_5-2-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-特点"}},[t._v("#")]),t._v(" 5.2 特点")]),t._v(" "),_("h4",{attrs:{id:"_1-快速握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-快速握手"}},[t._v("#")]),t._v(" 1） 快速握手")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[t._v("总结：")]),t._v(" "),_("p",[t._v("http2 : 先TCP握手，再TLS握手")]),t._v(" "),_("p",[t._v("http3: QUIC协议并不与TLS分层")])]),_("p",[t._v("​\t对于 HTTP/1 和 HTTP/2 协议，TCP 和 TLS 是分层的，分别属于内核实现的传输层、openssl 库实现的表示层，因此它们难以合并在一起，需要分批次来握手，先 TCP 握手，再 TLS 握手。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，甚至在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204070917829.webp",alt:"图片描述"}})]),t._v(" "),_("h4",{attrs:{id:"_2-多路复用-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-多路复用-2"}},[t._v("#")]),t._v(" 2）多路复用")]),t._v(" "),_("p",[t._v("​\t\tQUIC保留了HTTP2.0多路复用的特性，但是即使在多路复用过程中，同一个TCP连接上有多个stream，假如其中一个stream丢包，在重传前后续的stream都会受到影响，而"),_("strong",[t._v("QUIC中一个连接上的多个stream之间没有依赖")]),t._v("。所以当发生丢包时，只会影响当前的stream，也就避免了线头阻塞问题。")]),t._v(" "),_("p",[t._v("​\t而HTTP/2不同，HTTP/2只要某个流中的数据包丢失了，其他流也会因此受影响。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204111132433.png",alt:"img"}})]),t._v(" "),_("h4",{attrs:{id:"_3-优化重传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-优化重传"}},[t._v("#")]),t._v(" 3） 优化重传")]),t._v(" "),_("blockquote",[_("p",[t._v("TCP丢包重传")])]),t._v(" "),_("p",[t._v("​\t在发送方每一个包都标记由一个编号（"),_("code",[t._v("sequence number")]),t._v("）。当触发重传机制时，会复用原来的便后进行重新发送一次封包。")]),t._v(" "),_("p",[t._v("​\t但服务端接收到一个编号为N的包后，就无法判断编号为N的ACK，是否时接收端在收到初始分包后回传的ACK，这会加大后续的重传的计算的耗时。")]),t._v(" "),_("p",[t._v("​")]),t._v(" "),_("blockquote",[_("p",[t._v("QUIC丢包重传")])]),t._v(" "),_("p",[t._v("​\t QUIC为了避免这个问题，发送端在传送封包时，初始与重传的每一个封包都改用一个新的编号，"),_("code",[t._v("unique packet number")]),t._v("，每一个编号都唯一而且严格递增。这样每次在收到ACK时，就可以依据编号明确地判断这个ACK是来自初始封包或者是重传封包。")]),t._v(" "),_("h4",{attrs:{id:"_4-流量控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-流量控制"}},[t._v("#")]),t._v(" 4） 流量控制")]),t._v(" "),_("p",[t._v("​\t\t通过流量控制可以限制客户端传输资料量的大小，有了流量控制后，接收端就可以只保留相对应大小的接收"),_("code",[t._v("buffer")]),t._v("，优化记忆体被占用的空间。但是如果存在一个流量极慢的"),_("code",[t._v("stream")]),t._v(" ，光一个"),_("code",[t._v("stream")]),t._v("就有可能占用掉接收端所有的资源。QUIC为了避免这个潜在的HOL Blocking，采用了连线层 ("),_("code",[t._v("connection flow control")]),t._v(") 和 Stream 层的 ("),_("code",[t._v("stream flow control")]),t._v(") 流量控制，限制单一 "),_("code",[t._v("Stream")]),t._v(" 可以占用的最大"),_("code",[t._v("buffer size")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"_5-连接迁移"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-连接迁移"}},[t._v("#")]),t._v(" 5）  "),_("strong",[t._v("连接迁移")])]),t._v(" "),_("blockquote",[_("p",[t._v("TCP连接")])]),t._v(" "),_("p",[t._v("​\t由四元组（源IP、源端口、目的IP、目的端口）确认一条TCP连接，那么"),_("strong",[t._v("当移动设备的网络从4G切换到WIFI时，意味着IP地址变化了，那么就必须要断开连接，然后重新建立连接")]),t._v("。而连接的过程包含TCP三次握手和TLS四次握手的时延，以及TCP慢启动的减速过程，给用户的感觉就是网络突然卡顿一下，因此连接迁移的成本很高。")]),t._v(" "),_("blockquote",[_("p",[t._v("QUIC连接")])]),t._v(" "),_("p",[t._v("​\tQUIC协议没有用四元组的方式来绑定连接，而是通过"),_("strong",[t._v("连接ID")]),t._v("来标记通信的"),_("strong",[t._v("两个端")]),t._v("点，客户端和服务器可以各自选择一组ID来标记自己，因此即使移动设别的网络变化后，导致IP地址变化了，"),_("strong",[t._v("只要仍保有上下文信息")]),t._v("（比如连接ID、TLS密钥等），就可以无缝地复用原链接，消除重连成本。")]),t._v(" "),_("h3",{attrs:{id:"_5-3-存在挑战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-存在挑战"}},[t._v("#")]),t._v(" 5.3 存在挑战")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("服务器浏览器支持不好")]),t._v("  从目前的情况来看，服务器和浏览器端都没有对 HTTP/3 提供比较完整的支持。Chrome 虽然在数年前就开始支持 Google 版本的 QUIC，但是这个版本的 QUIC 和官方的 QUIC 存在着非常大的差异。")]),t._v(" "),_("li",[_("strong",[t._v("系统内核对UDP优化程度不足")]),t._v(" 部署 HTTP/3 也存在着非常大的问题。因为系统内核对 UDP 的优化远远没有达到 TCP 的优化程度，这也是阻碍 QUIC 的一个重要原因。")]),t._v(" "),_("li",[_("strong",[t._v("设备对UDP优化不足")]),t._v(" 中间设备僵化的问题。这些设备对 UDP 的优化程度远远低于 TCP，据统计使用 QUIC 协议时，大约有 3%～7% 的丢包率。")])]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("协议版本")]),t._v(" "),_("th",{staticStyle:{"text-align":"right"}},[t._v("解决核心问题")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("解决方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.9")]),t._v(" "),_("td",{staticStyle:{"text-align":"right"}},[t._v("HTML文件传输")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("确立了客户端请求、服务端响应的通信流程")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("1.0")]),t._v(" "),_("td",{staticStyle:{"text-align":"right"}},[t._v("不同类型文件传输")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("设立头部字段")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("1.1")]),t._v(" "),_("td",{staticStyle:{"text-align":"right"}},[t._v("创建/断开TCP连接开销大")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("建立长连接进行复用")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("2.0")]),t._v(" "),_("td",{staticStyle:{"text-align":"right"}},[t._v("并发数有限")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("二进制分帧")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("3.0")]),t._v(" "),_("td",{staticStyle:{"text-align":"right"}},[t._v("TCP丢包阻塞")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("采用UDP协议")])])])]),t._v(" "),_("p",[t._v("​")]),t._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),_("ol",[_("li",[_("a",{attrs:{href:"https://juejin.cn/post/6844903988953874445#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP发展史（HTTP1.1，HTTPS，SPDY，HTTP2.0，QUIC，HTTP3.0）"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.cn/post/6856036933723521032",target:"_blank",rel:"noopener noreferrer"}},[t._v("六张图从HTTP/0.9进化到HTTP3.0"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://baike.baidu.com/item/HTTP/243074?fr=aladdin#2",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度百科"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.cn/post/6844904001528397837",target:"_blank",rel:"noopener noreferrer"}},[t._v("http发展史(http0.9、http1.0、http1.1、http2、http3)梳理笔记"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/293378068",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP发展史"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);