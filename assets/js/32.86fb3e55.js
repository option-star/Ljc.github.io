(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{685:function(t,e,a){"use strict";a.r(e);var s=a(12),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-vue的基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue的基本原理"}},[t._v("#")]),t._v(" 1. Vue的基本原理")]),t._v(" "),a("p",[t._v("​\t当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203202252848.webp",alt:"0_tB3MJCzh_cB6i3mS-1.png"}})]),t._v(" "),a("h2",{attrs:{id:"_2-双向数据绑定的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-双向数据绑定的原理"}},[t._v("#")]),t._v(" 2. 双向数据绑定的原理")]),t._v(" "),a("p",[t._v("Vue.js 是采用"),a("strong",[t._v("数据劫持")]),t._v("结合"),a("strong",[t._v("发布者-订阅者模式")]),t._v("的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化")]),t._v(" "),a("li",[t._v("compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")]),t._v(" "),a("li",[t._v("Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己 ②自身必须有一个update()方法 ③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。")]),t._v(" "),a("li",[t._v("MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203202253821.webp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_3-data什么情况是对象-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-data什么情况是对象-函数"}},[t._v("#")]),t._v(" 3. data什么情况是对象？函数？")]),t._v(" "),a("ul",[a("li",[t._v("在根组件中，data不会被共享，可以放对象也可以放函数")]),t._v(" "),a("li",[t._v("在子组件中，data只能是一个函数，防止多个组件中共享一个数据")])]),t._v(" "),a("h2",{attrs:{id:"_4-vue的初始化流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue的初始化流程"}},[t._v("#")]),t._v(" 4. vue的初始化流程")]),t._v(" "),a("ol",[a("li",[t._v("new Vue时，传入options参数，并进行初始化操作_init")]),t._v(" "),a("li",[t._v("该初始化函数_init在initMixin中定义，主要为了"),a("code",[t._v("_init")]),t._v("方法传递Vue构造函数，并在原型上挂载"),a("code",[t._v("_init")]),t._v("方法")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("_init")]),t._v("方法中进行初始化\n"),a("ul",[a("li",[t._v("initState： 主要处理props、methods、data、computed、watch等对象")]),t._v(" "),a("li",[t._v("….")])])]),t._v(" "),a("li",[t._v("最后，在"),a("code",[t._v("_init")]),t._v("方法中判断有无传入el参数，如果传入则将数据挂载到页面上。")])]),t._v(" "),a("h2",{attrs:{id:"_5-vue中如何处理传入的data数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue中如何处理传入的data数据"}},[t._v("#")]),t._v(" 5. Vue中如何处理传入的data数据")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t由于在初始化函数"),a("code",[t._v("_init")]),t._v("方法中，调用initState处理props、methods、data、computed、watch等数据，对于data通过"),a("code",[t._v("initData")]),t._v("的方法对数据进行处理")])]),a("p",[a("code",[t._v("initData")]),t._v("函数的处理：")]),t._v(" "),a("ol",[a("li",[t._v("如果传入的是一个函数，则让函数的this指向Vue实例，并将函数返回值作为对象；如果传入的是一个对象，则直接使用对象。")]),t._v(" "),a("li",[a("strong",[t._v("数据代理")]),t._v(" ：通过proxy的方法进行代理data数据，即"),a("code",[t._v("vm.name = vm._data.name")]),t._v("，实际还是通过"),a("code",[t._v("Object.defineProperty")]),t._v("方法进行劫持")]),t._v(" "),a("li",[t._v("通过observe方法，重写 data对象的所有属性，将data变成响应式。")])]),t._v(" "),a("h2",{attrs:{id:"_6-如何将传入的data变成响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何将传入的data变成响应式"}},[t._v("#")]),t._v(" 6. 如何将传入的data变成响应式？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("ol",[a("li",[t._v("new Vue会调用_init方法进行初始化")]),t._v(" "),a("li",[t._v("会将用户的选项放到vm.$options上")]),t._v(" "),a("li",[t._v("会对当前属性上搜索有没有data数据 (initState)")]),t._v(" "),a("li",[t._v("有data判断data是不是一个函数，如果是函数取返回值 (initData)")]),t._v(" "),a("li",[t._v("observe 去观测data中的对象")]),t._v(" "),a("li",[t._v("如果更新对象不存在的属性，会导致视图不更新，如果是数组更新索引和长度不会触发更新。")]),t._v(" "),a("li",[t._v("如果是替换成一个新对象，新对象会被进行劫持，如果是数组存放新内容 push unshift（）新增的内容也会被劫持")]),t._v(" "),a("li",[t._v("通过"),a("code",[t._v("__ob__")]),t._v("进行标识这个对象被监控过。")])])]),a("p",[t._v("​\tVue中主要通过observe方法对data中数据进行观测：")]),t._v(" "),a("ol",[a("li",[t._v("先判断传入的是否是对象， 如果不是对象，则直接return，不做观测")]),t._v(" "),a("li",[t._v("通过Observe类来对data进行处理，如果观测过就跳过观测")])]),t._v(" "),a("h2",{attrs:{id:"_7-vue中如何识别被观测过的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue中如何识别被观测过的数据"}},[t._v("#")]),t._v(" 7. Vue中如何识别被观测过的数据？")]),t._v(" "),a("p",[t._v("​\t如果一个数据已经被观测过了，就不要观测了，用Observe类来实现，我观测过就增加一个标识"),a("code",[t._v("__ob_")]),t._v("，说明观测过了，在观测的时候，可以先检测是否观测过，如果观测过就跳过检测。")]),t._v(" "),a("p",[t._v("Observe类具体实现：")]),t._v(" "),a("ol",[a("li",[t._v("在data上添加"),a("code",[t._v("__ob__")]),t._v("属性，为Observe类的实例，所有被劫持过的属性都有"),a("code",[t._v("__ob__")])]),t._v(" "),a("li",[t._v("如果传入的值是对象， 通过调用"),a("code",[t._v("walk")]),t._v("方法，循环遍历对象，通过"),a("code",[t._v("defineReactive")]),t._v("方法重新定义属性, 进行数据劫持")]),t._v(" "),a("li",[t._v("如果传入的值是数组\n"),a("ul",[a("li",[a("strong",[t._v("先对数组的方法进行重写")]),t._v("，因为push、pop、shift、unshift、reverse、sort、splice，因为这些方法会改变数组本身。")]),t._v(" "),a("li",[t._v("然后通过调用"),a("strong",[t._v("observeArray")]),t._v("方法，使数组里的引用类型定义成响应式，实际上就是通过遍历数组对每一项进行observe函数进行处理")])])])]),t._v(" "),a("h2",{attrs:{id:"_8-闭包在vue中的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-闭包在vue中的使用"}},[t._v("#")]),t._v(" 8. 闭包在Vue中的使用")]),t._v(" "),a("p",[t._v("​\t在definedReactive中，通过使用Object.definedProperty方法定义对象属性，当获取对象属性值时，返回的是上一个作用域的变量的值，即defiendReactive的值，所以defiendReactive函数不会被销毁")]),t._v(" "),a("h2",{attrs:{id:"_9-vue2中性能缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue2中性能缺点"}},[t._v("#")]),t._v(" 9. Vue2中性能缺点")]),t._v(" "),a("p",[t._v("​\tvue2应用了defineProperty需要一加载的时候，就进行递归操作，所以耗费性能，如果层次过深也会浪费性能。")]),t._v(" "),a("blockquote",[a("p",[t._v("性能优化原则：")])]),t._v(" "),a("ol",[a("li",[t._v("不要把所有的数据都放在data中，因为所有数据都会增加get和set")]),t._v(" "),a("li",[t._v("不要写数据的时候 层次过深，尽量扁平化数据")]),t._v(" "),a("li",[t._v("不要频繁获取数据，因为每次获取数据都会触发getter函数的逻辑")]),t._v(" "),a("li",[t._v("如果数据不需要响应式，可以使用Object.freeze冻结属性。")])]),t._v(" "),a("h2",{attrs:{id:"_10-数组为什么不用defineproperty进行响应式处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-数组为什么不用defineproperty进行响应式处理"}},[t._v("#")]),t._v(" 10. 数组为什么不用defineProperty进行响应式处理")]),t._v(" "),a("p",[t._v("​\t数组也可以使用defineProperty,但是我们很少采用 "),a("code",[t._v("arr[i] = xxx")]),t._v("，如果数组也使用了defineProperty还是可以实现修改索引触发更新的，但是这种操作概率低，所以源码没有采用这种方式。")]),t._v(" "),a("p",[t._v("​\t所以数组修改索引不会导致视图更新，修改length也不会更新。")]),t._v(" "),a("p",[t._v("​\t但是是vue3中为了兼容proxy，内部对数组用的就是defineProperty")]),t._v(" "),a("h2",{attrs:{id:"_11-数组方法是如何重写的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-数组方法是如何重写的"}},[t._v("#")]),t._v(" 11. 数组方法是如何重写的？")]),t._v(" "),a("ol",[a("li",[t._v("会先调用数组原生的方法（通过apply方法改变this的指向）")]),t._v(" "),a("li",[t._v("然后对于可以新增元素的方法（即push、unshift、splice），对其新增的元素通过observeArray方法进行数据劫持")])]),t._v(" "),a("h2",{attrs:{id:"_12-defineproperty中除了get和set还有什么属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-defineproperty中除了get和set还有什么属性"}},[t._v("#")]),t._v(" 12 .defineProperty中除了get和set还有什么属性？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("enumrable")]),t._v(": 是否可枚举")]),t._v(" "),a("li",[a("code",[t._v("writable")]),t._v("：值是否可修改")]),t._v(" "),a("li",[a("code",[t._v("configurable")]),t._v(": 描述属性是否配置，以及是否删除")])]),t._v(" "),a("p",[t._v("​\t在已观测过的数据上增加"),a("code",[t._v("__ob_")]),t._v("属性， 其作用就是标识对象是否被观测过。其值为"),a("code",[t._v("Observe")]),t._v("类的实例")]),t._v(" "),a("p",[t._v("​\t为了避免在"),a("code",[t._v("this.walk")]),t._v("方法中造成无限递归，所以使用"),a("code",[t._v("enumrable")]),t._v("的属性设置"),a("code",[t._v("__ob__")]),t._v("设置为不可枚举。")]),t._v(" "),a("h2",{attrs:{id:"_13-vue中初始化完成后-如何进行挂载呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue中初始化完成后-如何进行挂载呢"}},[t._v("#")]),t._v(" 13. Vue中初始化完成后，如何进行挂载呢？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t在vue中，通过调用"),a("code",[t._v("Vue.prototpe.$mount")]),t._v("方法进行数据的挂载。")])]),a("p",[t._v("在"),a("code",[t._v("$mount")]),t._v("中，主要进行了一下操作：")]),t._v(" "),a("ol",[a("li",[t._v("通过传入的"),a("code",[t._v("el")]),t._v("属性，获取页面真实的元素")]),t._v(" "),a("li",[t._v("先判断用户是否传入render函数\n"),a("ul",[a("li",[t._v("存在render, 使用传入的render")]),t._v(" "),a("li",[t._v("不存在render， 判断是否存在传入的template\n"),a("ul",[a("li",[t._v("存在template，直接使用template")]),t._v(" "),a("li",[t._v("不存在template，通过compileToFunction的方法将传入的el.outerHTML编译成render函数")])])])])]),t._v(" "),a("li",[t._v("获取render函数后， 通过mountComponent方法进行挂载。在方法中，主要通过调用render方法生成虚拟节点vnode, 传入render函数中调用的方法，"),a("code",[t._v("_c")]),t._v("、、、")])]),t._v(" "),a("h2",{attrs:{id:"_14-vue中如何进行模板编译的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-vue中如何进行模板编译的"}},[t._v("#")]),t._v(" 14. Vue中如何进行模板编译的？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t当Vue完成初始化阶段后，通过"),a("code",[t._v("$mount")]),t._v("的方法进入模板编译阶段。会去先判断是否存在render, 再去判断是否存在template，如果都没有，则会将传入的el元素通过outerHTML转为template 再将template编译成render函数，这其中通过"),a("code",[t._v("compileToFunction")]),t._v("进行转化")])]),a("blockquote",[a("p",[t._v("compileToFunction具体操作：")])]),t._v(" "),a("ol",[a("li",[t._v("将template模板变成ast语法树 （parseHTML）")])]),t._v(" "),a("h2",{attrs:{id:"_15-vue初始化过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue初始化过程"}},[t._v("#")]),t._v(" 15. Vue初始化过程？")]),t._v(" "),a("ol",[a("li",[t._v("默认会调用"),a("code",[t._v("vue_init")]),t._v("方法将用户的参数挂载到"),a("code",[t._v("$option")]),t._v("选项中")]),t._v(" "),a("li",[t._v("vue会根据用户的参数进行数据的初始化 "),a("code",[t._v("props、computed、watch")]),t._v("，会获取到对象作为数据，可以通过"),a("code",[t._v("vm._data")]),t._v("方法访问到用户的数据")]),t._v(" "),a("li",[t._v("对数据进行观测：对象（递归使用defineProperty）、数组（方法重写）")]),t._v(" "),a("li",[t._v("将数据代理到vm上")]),t._v(" "),a("li",[t._v("判断用户是否传入了el属性，内部会调用"),a("code",[t._v("$mount")]),t._v("方法，此方法也可以用户自己调用")]),t._v(" "),a("li",[t._v("对模板的优先级处理 render/template/ outerHTML")]),t._v(" "),a("li",[t._v("将模板那编译成函数，parseHTML解析模板 -> ast语法树，解析语法树生成code -> render函数")]),t._v(" "),a("li",[t._v("通过render方法，生成虚拟dom + 真实的数据 =》真实dom（"),a("code",[t._v("vm._render")]),t._v("方法，render函数转虚拟节点）")]),t._v(" "),a("li",[t._v("根据虚拟节点渲染真实节点（"),a("code",[t._v("vm._updata")]),t._v("）")])]),t._v(" "),a("h2",{attrs:{id:"_16-render函数为什么用with函数包裹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-render函数为什么用with函数包裹"}},[t._v("#")]),t._v(" 16. render函数为什么用with函数包裹？")]),t._v(" "),a("p",[t._v("​\t通过with函数传递作用域，获取变量的值时，可以通过上层作用域获取值。")]),t._v(" "),a("h2",{attrs:{id:"_17-有了vnode之后如何生成真实dom-patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-有了vnode之后如何生成真实dom-patch"}},[t._v("#")]),t._v(" 17. 有了vnode之后如何生成真实dom （patch）")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过"),a("code",[t._v("vm._render")]),t._v("方法创建vnode后，通过调用"),a("code",[t._v("vm._update")]),t._v("方法进行生成真实节点。"),a("code",[t._v("vm._update")]),t._v("函数在lifecycleMixin中定义，其"),a("code",[t._v("_update")]),t._v("方法主要通过"),a("code",[t._v("patch")]),t._v("方法将vnode生成真实dom")])]),a("blockquote",[a("p",[t._v("patch方法")])]),t._v(" "),a("ol",[a("li",[t._v("删除老节点，根据vnode创建新节点，替换掉老节点")])]),t._v(" "),a("h2",{attrs:{id:"_18-看源码思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-看源码思路"}},[t._v("#")]),t._v(" 18. 看源码思路")]),t._v(" "),a("ol",[a("li",[t._v("先找package.json 找到 scripts.build")]),t._v(" "),a("li",[t._v("找到打包时采用的入口方便分析 esm cjs / runtime 、compiler、full")]),t._v(" "),a("li",[t._v("找到打包入口，文件在")])]),t._v(" "),a("h2",{attrs:{id:"_19-如何将template转换成ast语法树-parserhtml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-如何将template转换成ast语法树-parserhtml"}},[t._v("#")]),t._v(" 19.如何将template转换成AST语法树 "),a("code",[t._v("parserHTML")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t在"),a("code",[t._v("$mount")]),t._v("的方法中会通过"),a("code",[t._v("compilerTounctionn")]),t._v("将"),a("code",[t._v("template")]),t._v("转换成"),a("code",[t._v("render")]),t._v("函数，会先通过"),a("code",[t._v("parserHTML")]),t._v("将"),a("code",[t._v("template")]),t._v("转换成"),a("code",[t._v("AST")]),t._v("语法树")])]),a("blockquote",[a("p",[t._v("parserHTML方法发生了什么？")])]),t._v(" "),a("p",[t._v("parserHTML方法主要通过正则匹配构建ast语法树：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("attribute")]),t._v(" : 匹配标签属性正则")]),t._v(" "),a("li",[a("code",[t._v("ncname")]),t._v(" : 匹配标签名正则")]),t._v(" "),a("li",[a("code",[t._v("qnameCapture")]),t._v("： 匹配命名空间正则")]),t._v(" "),a("li",[a("code",[t._v("startTagOpen")]),t._v(": 匹配开始标签的前半部分")]),t._v(" "),a("li",[a("code",[t._v("startTagClose")]),t._v(": 匹配开始标签的右尖部分")]),t._v(" "),a("li",[a("code",[t._v("endTag")]),t._v("： 匹配尾标签： "),a("code",[t._v("/>")]),t._v(" 或"),a("code",[t._v(">")])]),t._v(" "),a("li",[a("code",[t._v("doctype")]),t._v(": 匹配"),a("code",[t._v("!DOCTYPE")])]),t._v(" "),a("li",[a("code",[t._v("comment")]),t._v(": 匹配注释")]),t._v(" "),a("li",[a("code",[t._v("defaultTagRE")]),t._v(": 匹配双大括号，"),a("code",[t._v(t._s(t.xxx))])])]),t._v(" "),a("p",[a("strong",[t._v("思路")]),t._v("： 通过不停地截取模板，直到把模板全部解析完毕")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通过while循环，通过"),a("code",[t._v("advance")]),t._v("方法，将匹配到的内容从字符串中截取。获得匹配信息后通过栈来构建树形结构")])]),t._v(" "),a("li",[a("p",[t._v("先获取"),a("code",[t._v("<")]),t._v("在html的位置，如果位置index为0，则证明是开始标签或者是结束标签")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果匹配到开始标签")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先通过"),a("code",[t._v("parseStartTag")]),t._v("获取匹配后的"),a("code",[t._v("match")]),t._v("信息")]),t._v(" "),a("ol",[a("li",[t._v("构造一个"),a("code",[t._v("match")]),t._v("对象, 其包含"),a("code",[t._v("tagName")]),t._v("： 标签名、"),a("code",[t._v("attrs")]),t._v("： 属性等信息。")]),t._v(" "),a("li",[t._v("然后通过循环匹配到属性信息，放入"),a("code",[t._v("match")]),t._v("对象中。")]),t._v(" "),a("li",[t._v("然后通过匹配到尾标签，通过"),a("code",[t._v("advance")]),t._v("截取。")]),t._v(" "),a("li",[t._v("最后返回"),a("code",[t._v("match")]),t._v("对象信息")])])]),t._v(" "),a("li",[a("p",[t._v("将"),a("code",[t._v("match")]),t._v("信息放到"),a("code",[t._v("start")]),t._v("方法处理")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("遇到开始标签，就取栈中的最后一个作为父节点")])]),t._v(" "),a("li",[a("p",[t._v("如果root为null，则说明当前节点为根节点，便把当前节点构造为一个root。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    p\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("并维护元素的"),a("code",[t._v("parent")]),t._v("属性，和维护父元素的"),a("code",[t._v("children")]),t._v("属性。")])])])])])]),t._v(" "),a("li",[a("p",[t._v("如果是结束标签")]),t._v(" "),a("ul",[a("li",[t._v("将匹配到的信息放到"),a("code",[t._v("end")]),t._v("方法中处理， 就是把栈中的元素pop出去。")])])])])]),t._v(" "),a("li",[a("p",[t._v("如果匹配到文本，通过"),a("code",[t._v("text")]),t._v("方法处理， 直接接入到栈中最后一个元素的最后一项的children属性中。")])])]),t._v(" "),a("h2",{attrs:{id:"_20-vue3的模板编译原理与vue2的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue3的模板编译原理与vue2的区别"}},[t._v("#")]),t._v(" 20. vue3的模板编译原理与vue2的区别")]),t._v(" "),a("p",[t._v("​\tvue3的编译原理比vue2里好很多，没有这么多正则。")]),t._v(" "),a("h2",{attrs:{id:"_21-如何通过ast语法树生成模板字符串-generate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-如何通过ast语法树生成模板字符串-generate"}},[t._v("#")]),t._v(" 21. 如何通过ast语法树生成模板字符串？ "),a("code",[t._v("generate")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过调用调用"),a("code",[t._v("compileToFunction")]),t._v("的方法将"),a("code",[t._v("tamplate")]),t._v("生成"),a("code",[t._v("render")]),t._v("函数，在函数中会先通过"),a("code",[t._v("parseHTML")]),t._v("生成ast语法树，ast语法树构建完成之后，会通过"),a("code",[t._v("generate")]),t._v("方法，将ast语法树构建成模板字符串。")])]),a("blockquote",[a("p",[t._v("generate方法具体发生了什么？")])]),t._v(" "),a("p",[t._v("实际上genrate函数就是通过传入的ast语法树，进行字符串的拼接形成模板字符串。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("_c")]),t._v("： 创建元素， "),a("code",[t._v("_c(标签名，属性，子元素)")])]),t._v(" "),a("li",[t._v("对于子元素的处理，就通过"),a("code",[t._v("genChildren")]),t._v("的方法递归调用generate的方法")]),t._v(" "),a("li",[t._v("对于文本节点处理：\n"),a("ol",[a("li",[t._v("用"),a("code",[t._v("_v('文本内容')")])]),t._v(" "),a("li",[t._v("通过循环匹配表达式正则，处理"),a("code",[t._v(t._s(t.xxx))]),t._v("的情况，需要将xxx表达式转换成普通值，即将表达式用"),a("code",[t._v("_s()")]),t._v("进行包裹。")])])])]),t._v(" "),a("h2",{attrs:{id:"_22-如何将模板字符串转化成render函数呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-如何将模板字符串转化成render函数呢"}},[t._v("#")]),t._v(" 22. 如何将模板字符串转化成render函数呢？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过"),a("code",[t._v("$mount")]),t._v("方法进入vue的挂载阶段，会先去判断options中有没有"),a("code",[t._v("render")]),t._v("，再去判断有没有"),a("code",[t._v("template")]),t._v("，如果没有"),a("code",[t._v("template")]),t._v("，则将"),a("code",[t._v("el.outerHTml")]),t._v("转换为"),a("code",[t._v("template")]),t._v("，最后通过"),a("code",[t._v("compilerToFunction")]),t._v("方法将"),a("code",[t._v("template")]),t._v("转换为"),a("code",[t._v("render")]),t._v("函数，其中函数会先去调用"),a("code",[t._v("parseHTML")]),t._v("方法转化为"),a("code",[t._v("AST")]),t._v("语法树，然后再通过"),a("code",[t._v("generate")]),t._v("方法将"),a("code",[t._v("AST")]),t._v("语法树转换为模板字符串，最后通过"),a("code",[t._v("new Function")]),t._v("妆化为"),a("code",[t._v("render")]),t._v("函数")])]),a("blockquote",[a("p",[t._v("new Function发生了什么？")])]),t._v(" "),a("p",[a("code",[t._v("let render = new Function(with(this){return ${模板字符串}})")])]),t._v(" "),a("h2",{attrs:{id:"_23-如何通过render构建成虚拟dom-render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何通过render构建成虚拟dom-render"}},[t._v("#")]),t._v(" 23. 如何通过render构建成虚拟Dom, "),a("code",[t._v("_render")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过"),a("code",[t._v("parseHTML")]),t._v("获取ast语法树之后，通过递归调用"),a("code",[t._v("generate")]),t._v("构建模板字符串，再通过"),a("code",[t._v("new Function + with")]),t._v("的方法构建成render函数，最后获得的函数为"),a("code",[t._v("_c('标签名'， 属性，子元素)")]),t._v("， 主要通过"),a("code",[t._v("mountComponent")]),t._v("的方法对render方法进行调用，而"),a("code",[t._v("_render")]),t._v("方法主要在"),a("code",[t._v("renderMixin")]),t._v("的函数中进行原型上的挂载。")])]),a("blockquote",[a("p",[a("code",[t._v("renderMixin")]),t._v("函数是如何定义"),a("code",[t._v("render")]),t._v("的呢？")])]),t._v(" "),a("p",[t._v("​\t"),a("code",[t._v("mountComponent")]),t._v("函数主要就是对render方法的调用，而"),a("code",[t._v("vm._render")]),t._v("方法是在"),a("code",[t._v("renderMixin")]),t._v("的函数中在Vue原型挂载"),a("code",[t._v("_render")]),t._v("方法。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("renderMixin")]),t._v("的函数中除了定义"),a("code",[t._v("render")]),t._v("方法，还定义了诸多方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("_c")]),t._v(" : 创建元素型的节点, 实际上是调用"),a("code",[t._v("createElement")]),t._v("方法返回虚拟节点")]),t._v(" "),a("li",[a("code",[t._v("_v")]),t._v("： 创建文本型的节点， 实际上是调用"),a("code",[t._v("createText")]),t._v("方法返回虚拟节点")]),t._v(" "),a("li",[a("code",[t._v("_s")]),t._v(": JSON.stringify")])]),t._v(" "),a("p",[a("code",[t._v("_render")]),t._v("方法中核心就是执行render方法， 传入"),a("code",[t._v("_c")]),t._v("、"),a("code",[t._v("_v")]),t._v("、"),a("code",[t._v("_s")]),t._v("等函数。")]),t._v(" "),a("p",[t._v("其中"),a("code",[t._v("createElement")]),t._v("、"),a("code",[t._v("createText")]),t._v("等方法实际就是通过传入不同的参数，实例化"),a("code",[t._v("Vnode")]),t._v("的方法，创建 不同的虚拟DOM。")]),t._v(" "),a("blockquote",[a("p",[t._v("虚拟DOM结果如下：")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNodeData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("VNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    elm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    context"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    componentOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNodeComponentOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    asyncFactory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Function")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点的标签名 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点的子节点，是一个数组 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" children\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点的文本 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前虚拟节点的真实dom节点 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elm\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点的名字空间 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 编译作用域 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 函数化组件作用域 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fnContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 函数化组件的option选项 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fnOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fnScopeId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 节点的key属性，被当做节点的标志，用于优化 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 组价的option选项 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("componentOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" componentOptions\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点对应的组件的实例 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("componentInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前节点的父节点 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 是否是原生HTML或者只是普通文本，innerHTML的时候是true. textContent的时候是false */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 静态节点标志 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isStatic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 作为根节点插入 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isRootInsert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 是否为注释接地那 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isComment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 是否为克隆节点 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isCloned "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 是否有v-once指令 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOnce "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asyncFactory "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" asyncFactory\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asyncMeta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isAsyncPlaceholder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br")])]),a("h2",{attrs:{id:"_24-为什么有了ast语法树-还需要vnode呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-为什么有了ast语法树-还需要vnode呢"}},[t._v("#")]),t._v(" 24. 为什么有了ast语法树，还需要vnode呢？")]),t._v(" "),a("p",[t._v("​\t其实vnode其实就是一个对象，用来描述节点的，这个和ast语法树长得很像啊？")]),t._v(" "),a("p",[t._v("​\tast语法树描述语法的，它并没有用户自己的逻辑，只是语法解析出来的内容。")]),t._v(" "),a("p",[t._v("​\tvnode，它是描述dom结构的，可以扩展属性。")]),t._v(" "),a("h2",{attrs:{id:"_25-虚拟节点如何去渲染成真实节点呢-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-虚拟节点如何去渲染成真实节点呢-update"}},[t._v("#")]),t._v(" 25. 虚拟节点如何去渲染成真实节点呢？ "),a("code",[t._v("_update")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过"),a("code",[t._v("compilerToFunction")]),t._v("将"),a("code",[t._v("template")]),t._v("转换成"),a("code",[t._v("render")]),t._v("函数后，通过调用"),a("code",[t._v("mountComponent")]),t._v("的方法，去运行render函数，将render函数转换为虚拟节点，实际就是执行render函数中的"),a("code",[t._v("_c、_v、_s")]),t._v("等方法，而这些方法实际上就是通过传入不同的参数，实例化"),a("code",[t._v("VNode")]),t._v("的一个类，创建虚拟节点。当创建完虚拟节点后，还需要在"),a("code",[t._v("mountComponent")]),t._v("方法中，调用"),a("code",[t._v("vm._update")]),t._v("的方法进行实例的挂载。")])]),a("p",[t._v("​\t通过"),a("code",[t._v("_render")]),t._v("方法构建好虚拟节点后，通过"),a("code",[t._v("_update")]),t._v("方法将虚拟节点变成真实节点。")]),t._v(" "),a("p",[t._v("​\t而"),a("code",[t._v("_update")]),t._v("方法，在"),a("code",[t._v("lifecycleMixin")]),t._v("函数中挂载到"),a("code",[t._v("Vue")]),t._v("的原型上的。其核心思想就是，采用的是先序深度遍历，创建节点（也就是遇到节点就创建节点，递归创建）。")]),t._v(" "),a("p",[t._v("核心通过"),a("code",[t._v("patch")]),t._v("方法将虚拟节点转换为真实节点。")]),t._v(" "),a("p",[a("code",[t._v("patch")]),t._v("方法需要传入两个参数:")]),t._v(" "),a("ul",[a("li",[t._v("oldVnode : 旧节点")]),t._v(" "),a("li",[t._v("Vnode : 新节点")])]),t._v(" "),a("p",[a("code",[t._v("patch")]),t._v("方法就是主要通过删除老节点oldVnode，根据vnode创建新节点，替换掉老节点。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("patch")]),t._v("方法先通过"),a("code",[t._v("createElm")]),t._v("方法通过虚拟节点vnode创建真实节点。")]),t._v(" "),a("li",[t._v("通过"),a("code",[t._v("nextSibing")]),t._v("方法获取旧节点的下一个节点")]),t._v(" "),a("li",[t._v("然后通过"),a("code",[t._v("insertBefore")]),t._v("方法，将新创建的元素插入到旧节点下一个元素的前面 。如果通过"),a("code",[t._v("nextSibing")]),t._v("获取的值为null，则"),a("code",[t._v("insertBefore")]),t._v("就相当于"),a("code",[t._v("appendChild")])]),t._v(" "),a("li",[t._v("然后通过"),a("code",[t._v("removeChild")]),t._v("的方法将旧节点删除掉。")])]),t._v(" "),a("h2",{attrs:{id:"_26-如果通过虚拟vnode创建元素呢-createelm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-如果通过虚拟vnode创建元素呢-createelm"}},[t._v("#")]),t._v(" 26. 如果通过虚拟vnode创建元素呢？ "),a("code",[t._v("createElm")])]),t._v(" "),a("ol",[a("li",[t._v("如果是元素节点，先通过"),a("code",[t._v("document.createElement")]),t._v("方法创建元素，如果该vnode还具有"),a("code",[t._v("children")]),t._v("属性，则通过递归调用"),a("code",[t._v("createElm")]),t._v("方法创建子节点， 并通过"),a("code",[t._v("appendChild")]),t._v("方法将子节点添加入元素中。")]),t._v(" "),a("li",[t._v("并且在vnode上添加el属性（"),a("code",[t._v("vnode.el")]),t._v("），让虚拟节点和真实节点做一个映射关系，后续某个虚拟节点更新了，可以跟踪真实节点，并更新真实节点。")]),t._v(" "),a("li",[t._v("对于元素的属性等，通过"),a("code",[t._v("updateProperties")]),t._v("方法进行处理，通过循环调用"),a("code",[t._v("setAttribute")]),t._v("方法添加属性。样式等处理后续完善。")])]),t._v(" "),a("h2",{attrs:{id:"_27-vue更新阶段是怎么做的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-vue更新阶段是怎么做的"}},[t._v("#")]),t._v(" 27. vue更新阶段是怎么做的？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t从调用"),a("code",[t._v("_init")]),t._v("的方法进行初始化，然后调用"),a("code",[t._v("$mount")]),t._v("的方法进行挂载，先通过"),a("code",[t._v("compilerToFunction")]),t._v("方法将"),a("code",[t._v("template")]),t._v("转化为"),a("code",[t._v("render")]),t._v("函数，然后通过调用"),a("code",[t._v("_render")]),t._v("方法将"),a("code",[t._v("render")]),t._v("函数转化为"),a("code",[t._v("vnode")]),t._v(", 最后通过"),a("code",[t._v("patch")]),t._v("方法对"),a("code",[t._v("vnode")]),t._v("生成真实dom进行过载。")])]),a("ul",[a("li",[t._v("只有根组件的情况： （每个属性都有一个dep）\n"),a("ol",[a("li",[t._v("vue里面用到了观察者模式，默认组件渲染的时候，会创建一个watcher，（并渲染视图）")]),t._v(" "),a("li",[t._v("当渲染视图的时候，会取date中的数据，会走每个属性的get方法，就让这个属性的dep记录watcher")]),t._v(" "),a("li",[t._v("同时让watcher也记住dep，（dep和watcher是多对多的关系，因为一个属性可能对应多个视图，一个视图对应多个数据）")]),t._v(" "),a("li",[t._v("如果数据发生变化，会通知对应的属性的dep，依次通知存放的watcher去更新。")])])])]),t._v(" "),a("h2",{attrs:{id:"_28-vue中对象是如何更新的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-vue中对象是如何更新的"}},[t._v("#")]),t._v(" 28. vue中对象是如何更新的？")]),t._v(" "),a("blockquote",[a("p",[t._v("核心思路")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一个属性对应一个dep")]),t._v(": 一个属性可以在A组件和B组件里使用, 所以一个属性对应一个dep")]),t._v(" "),a("li",[a("strong",[t._v("一个dep对应多个watcher")]),t._v("： dep里存了A组件的watcher和B组件的watcher,所以一个dep对应斗个watcher")]),t._v(" "),a("li",[a("strong",[t._v("一个watcher可以对应多个dep")]),t._v("： 视图有多个数据，多个数据对应多个dep，所以一个watcher可以有多个dep")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("可以理解 为： 一个组件对应一个watcher， 而watcher的目的就是用于更新。")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t当通过"),a("code",[t._v("compilerToFunction")]),t._v("方法生成render方法后，实际是通过"),a("code",[t._v("vm._update(vm._render)")]),t._v("执行，进行挂载，而源码中该函数执行即为"),a("code",[t._v("updateComponent")]),t._v("中。所以更新逻辑主要就是通过调用"),a("code",[t._v("updateComponent")]),t._v("执行。所以对象更新的核心思路就是： 如果数据变化了，可以调用"),a("code",[t._v("updateComponent")]),t._v("方法。所以可以借助"),a("code",[t._v("watcher")]),t._v("的概念，如果数据变了可以自动调用"),a("code",[t._v("updateCompoent")]),t._v("方法")])]),a("blockquote",[a("p",[t._v("函数主要通过mountComponent方法进行更新挂载：")])]),t._v(" "),a("ol",[a("li",[t._v("初始化的时候通过调用"),a("code",[t._v("updateComponent")]),t._v("方法，即"),a("code",[t._v("vm._update(vm._render)")]),t._v("方法进行更新")]),t._v(" "),a("li",[t._v("然后通过实例化渲染Watcher， 当数据变化的时候，调用"),a("code",[t._v("updateComponent")]),t._v("方法")])]),t._v(" "),a("h2",{attrs:{id:"_29-vue中的更新逻辑和发布订阅有啥区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-vue中的更新逻辑和发布订阅有啥区别"}},[t._v("#")]),t._v(" 29. vue中的更新逻辑和发布订阅有啥区别")]),t._v(" "),a("p",[t._v("发布订阅是手动触发更新，而vue则是自动触发更新的。")]),t._v(" "),a("h2",{attrs:{id:"_30-watcher类是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-watcher类是如何实现的"}},[t._v("#")]),t._v(" 30. Watcher类是如何实现的？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Watcher更新时，传入五个参数")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("vm")]),t._v(": vue实例")]),t._v(" "),a("li",[a("code",[t._v("expOrFn")]),t._v("： 页面渲染逻辑")]),t._v(" "),a("li",[a("code",[t._v("cb")]),t._v(" : 回调函数")]),t._v(" "),a("li",[a("code",[t._v("options")]),t._v(":")]),t._v(" "),a("li",[a("code",[t._v("isRenderWatcher")]),t._v(": 是否为渲染Watcher")])])]),t._v(" "),a("li",[a("p",[t._v("传入参数后，进行参数处理")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("this.getter = fn")]),t._v(" ：fn就是页面渲染逻辑")])])]),t._v(" "),a("li",[a("p",[t._v("然后调用get方法，进行初始化"),a("code",[t._v("Watcher")]),t._v("。")]),t._v(" "),a("ol",[a("li",[t._v("调用"),a("code",[t._v("pushTarget")]),t._v(", 将当前Watcher放入到"),a("code",[t._v("Dep.target")]),t._v("中，用于依赖收集。")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("this.getter")]),t._v("方法， 进行渲染逻辑")]),t._v(" "),a("li",[t._v("这样就可以保证之后当前渲染到的属性才能获取到当前的"),a("code",[t._v("Watcher")])])])]),t._v(" "),a("li",[a("p",[t._v("当收集依赖的时候，会调用到"),a("code",[t._v("addDep")]),t._v("方法")]),t._v(" "),a("ol",[a("li",[t._v("其中维护着一个数组newDepIds， 用于Dep去重")]),t._v(" "),a("li",[t._v("然后把传入的Dep加入到"),a("code",[t._v("newDeps")]),t._v("中将Dep存储起来")]),t._v(" "),a("li",[t._v("然后通过调用"),a("code",[t._v("dep.addSub")]),t._v("的方法，将当前的"),a("code",[t._v("Watcher")]),t._v("存储入"),a("code",[t._v("Dep")]),t._v("的"),a("code",[t._v("subs")]),t._v("数组中。")])])])]),t._v(" "),a("h2",{attrs:{id:"_31-dep类是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-dep类是如何实现的"}},[t._v("#")]),t._v(" 31. Dep类是如何实现的？")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Dep的属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("subs")]),t._v(": 用于存放"),a("code",[t._v("Watcher")]),t._v("的数组")]),t._v(" "),a("li",[a("code",[t._v("id")]),t._v(" : 用于做唯一标识")]),t._v(" "),a("li",[a("code",[t._v("target")]),t._v("： 表示当前依赖的目标是谁（哪个Watcher）")])])]),t._v(" "),a("li",[a("p",[t._v("当用户取属性时，会触发"),a("code",[t._v("depend")]),t._v("的方法，调用"),a("code",[t._v("Watcher")]),t._v("即"),a("code",[t._v("Dep.target")]),t._v("的"),a("code",[t._v("addDep")]),t._v("方法， 用于"),a("code",[t._v("Dep")]),t._v("去重，然后Watcher存储当前dep , 然后调用"),a("code",[t._v("addSub")]),t._v("方法。")])]),t._v(" "),a("li",[a("p",[t._v("当调用"),a("code",[t._v("addSub")]),t._v("方法，就是将当前Watcher存入"),a("code",[t._v("subs")]),t._v("数组中")])])]),t._v(" "),a("h2",{attrs:{id:"_32-依赖收集的过程-dep-append"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-依赖收集的过程-dep-append"}},[t._v("#")]),t._v(" 32. 依赖收集的过程？"),a("code",[t._v("Dep.append")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t进行数据初始化的时候，如果是传入的值是对象的话通过调用"),a("code",[t._v("walk")]),t._v("方法，循环调用"),a("code",[t._v("defineReactive")]),t._v("方法对每个属性继续数据劫持。所以要为每个属性增加Dep的话，可以在"),a("code",[t._v("defineReactive")]),t._v("中定义。")])]),a("ol",[a("li",[t._v("页面更新的时候，会调用"),a("code",[t._v("mountComponent")]),t._v("的方法，在该方法中会在实例化一个渲染"),a("code",[t._v("Watcher")]),t._v(", 然后调用"),a("code",[t._v("Watcher")]),t._v("中的"),a("code",[t._v("get")]),t._v("方法，主要做以下工作：\n"),a("ul",[a("li",[t._v("调用"),a("code",[t._v("pushTarget")]),t._v("， 将当前"),a("code",[t._v("Watcher")]),t._v("放到"),a("code",[t._v("Dep.target")]),t._v("的属性中")]),t._v(" "),a("li",[t._v("然后调用"),a("code",[t._v("updateComponent")]),t._v("的方法，进行初渲染")]),t._v(" "),a("li",[t._v("然后通过"),a("code",[t._v("popTarget")]),t._v("，重置"),a("code",[t._v("Dep.target")]),t._v("的值")])])]),t._v(" "),a("li",[t._v("当用户取值时， 会调用"),a("code",[t._v("defineProperty")]),t._v("的"),a("code",[t._v("get")]),t._v("方法，这时触发"),a("code",[t._v("Dep.append")])]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("Dep.append")]),t._v("的方法中，会调用"),a("code",[t._v("Dep.target")]),t._v("（即"),a("code",[t._v("Watcher")]),t._v("）的addDep方法进行收集Watcher")]),t._v(" "),a("li",[t._v("而"),a("code",[t._v("Watcher.addDep")]),t._v("方法，会通过id的方法，用Set的数据结构先对Dep进行去重，然后将"),a("code",[t._v("dep")]),t._v("收集到"),a("code",[t._v("newDeps")]),t._v("数组中，然后调用"),a("code",[t._v("Dep.addSub")]),t._v("方法，将当前Watcher放到"),a("code",[t._v("Dep.subs")]),t._v("数组中")]),t._v(" "),a("li",[t._v("这样dep就收集到了多个"),a("code",[t._v("Watcher")]),t._v(", 而"),a("code",[t._v("Watcher")]),t._v("也收集到了"),a("code",[t._v("Dep")])])]),t._v(" "),a("h2",{attrs:{id:"_33-依赖收集后-数据该如何进行更新呢-dep-notify-watcher-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-依赖收集后-数据该如何进行更新呢-dep-notify-watcher-update"}},[t._v("#")]),t._v(" 33. 依赖收集后，数据该如何进行更新呢？"),a("code",[t._v("Dep.notify")]),t._v(" "),a("code",[t._v("Watcher.update")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t用户取数据后，会调用"),a("code",[t._v("defineProperty")]),t._v("的get方法，进行依赖收集，即"),a("code",[t._v("Dep")]),t._v("获取多个"),a("code",[t._v("Watcher")]),t._v(", "),a("code",[t._v("Watcher")]),t._v("也获取了多个"),a("code",[t._v("Dep")])]),t._v(" "),a("p",[t._v("​\t当用户修改数据的时候，会调用"),a("code",[t._v("Dep.notify")]),t._v("方法，进行数据更新。")])]),a("blockquote",[a("p",[t._v("notify实现逻辑？")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stabilize the subscriber list first")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      subs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("​\t实际上的操作就是，通过循环"),a("code",[t._v("subs")]),t._v("数组中收集的"),a("code",[t._v("Watcher")]),t._v("，调用"),a("code",[t._v("Watcher")]),t._v("中的"),a("code",[t._v("update")]),t._v("方法， 实际上就是调用"),a("code",[t._v("Watcher")]),t._v("的"),a("code",[t._v("get")]),t._v("方法，进行渲染（"),a("code",[t._v("updateComponent")]),t._v("）")]),t._v(" "),a("p",[t._v("​\t再"),a("code",[t._v("update")]),t._v("方法中可以做异步更新逻辑。")]),t._v(" "),a("h2",{attrs:{id:"_34-如何实现vue的异步更新逻辑-queuewatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-如何实现vue的异步更新逻辑-queuewatcher"}},[t._v("#")]),t._v(" 34. 如何实现vue的异步更新逻辑？"),a("code",[t._v("queueWatcher")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t当用户更新数据时，会调用"),a("code",[t._v("defineProperty")]),t._v("中的"),a("code",[t._v("set")]),t._v("方法，设置值后，会调用"),a("code",[t._v("Dep.notify")]),t._v("方法，进行循环调用"),a("code",[t._v("Watcher")]),t._v("中的"),a("code",[t._v("update")]),t._v("方法。")]),t._v(" "),a("p",[t._v("​\t由于每次更新数据都会调用这个update方法，我们可以将更新的逻辑缓存起来，等到同步更新数据的逻辑执行完毕后，依次调用（含有去重逻辑）")])]),a("p",[t._v("每次更新调用"),a("code",[t._v("update")]),t._v("方法，都会执行其"),a("code",[t._v("queueWatcher")]),t._v("方法")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("去重")]),t._v("： 维护着"),a("code",[t._v("has")]),t._v("数组，用于存储已有的"),a("code",[t._v("Watcher")]),t._v("的"),a("code",[t._v("id")]),t._v("， 用"),a("code",[t._v("has[id] == null")]),t._v("来判断是否重复")]),t._v(" "),a("li",[a("strong",[t._v("缓存")]),t._v("： 通过维护则"),a("code",[t._v("queue")]),t._v("队列，每次把"),a("code",[t._v("watcher")]),t._v("都存放入"),a("code",[t._v("queue")]),t._v("队列当中。")]),t._v(" "),a("li",[a("strong",[t._v("防抖")]),t._v(": 通过维护着"),a("code",[t._v("waitting")]),t._v("变量，默认值为false，只有清空"),a("code",[t._v("queue")]),t._v("中的watcher才会设置为"),a("code",[t._v("true")])]),t._v(" "),a("li",[a("strong",[t._v("异步")]),t._v("： 当"),a("code",[t._v("waitting")]),t._v("变量为"),a("code",[t._v("fasle")]),t._v("， 才会设置nextTick，清空queue队列，然后执行"),a("code",[t._v("flushSchedulerQueue")]),t._v("的方法，实际就是遍历每个watcher执行其"),a("code",[t._v("run()")]),t._v("的方法。")])]),t._v(" "),a("h2",{attrs:{id:"_35-vue3和vue2中nexttick的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-vue3和vue2中nexttick的区别"}},[t._v("#")]),t._v(" 35. vue3和vue2中nextTick的区别？")]),t._v(" "),a("p",[t._v("vue3里面的nextTick就是promise, vue2里面做了一些兼容性处理")]),t._v(" "),a("h2",{attrs:{id:"_36-nexttick是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-nexttick是如何实现的"}},[t._v("#")]),t._v(" 36. nextTick是如何实现的？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t当用户更新的时候，会调用"),a("code",[t._v("Dep.notify")]),t._v("方法，将"),a("code",[t._v("Dep")]),t._v("中的每一个"),a("code",[t._v("Watcher")]),t._v("的"),a("code",[t._v("update")]),t._v("方法，而"),a("code",[t._v("update")]),t._v("实际就是调用"),a("code",[t._v("queueWatcher")]),t._v("的方法，去对watcher进行去重、缓存、节流和异步执行，而异步执行就是调用"),a("code",[t._v("nextTick")]),t._v("的方法实现的。")])]),a("p",[t._v("​\t但是"),a("code",[t._v("nextTick")]),t._v("的方法，有vue内部的，用户也可以通过"),a("code",[t._v("$nextTick")]),t._v("方法进行定义。")]),t._v(" "),a("p",[t._v("​\t所以，nextTick中也维护着一个"),a("code",[t._v("pending")]),t._v("变量，用于对nextTick多次执行，只调用一次。")]),t._v(" "),a("p",[t._v("​\t并且维护着一个数组"),a("code",[t._v("callbacks")]),t._v(", 存放着调用"),a("code",[t._v("nextTick")]),t._v("所有的回调函数，等同步代码执行完再调用"),a("code",[t._v("flushCallbacks")]),t._v("方法进行异步执行，清空"),a("code",[t._v("callbacks")]),t._v("数组。即多次nextTick，只执行一次"),a("code",[t._v("then")]),t._v("方法")]),t._v(" "),a("h2",{attrs:{id:"_37-数组如何依赖收集-数组更新时-又如何触发更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-数组如何依赖收集-数组更新时-又如何触发更新"}},[t._v("#")]),t._v(" 37.数组如何依赖收集？数组更新时，又如何触发更新？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t对数据进行响应式观测的时候，会调用"),a("code",[t._v("observe")]),t._v("的方法进行观测，然后在"),a("code",[t._v("observer")]),t._v("方法中，进行"),a("code",[t._v("new Observer")]),t._v("实例化")])]),a("blockquote",[a("p",[t._v("数组依赖收集")])]),t._v(" "),a("ol",[a("li",[t._v("在实例化"),a("code",[t._v("Observer")]),t._v("类的时候，添加"),a("code",[t._v("dep")]),t._v("属性，值为"),a("code",[t._v("new Dep")])]),t._v(" "),a("li",[t._v("当取属性值时，会调用"),a("code",[t._v("defineProperty")]),t._v("的"),a("code",[t._v("get")]),t._v("方法，在get方法中，调用数组或对象的Observer实例上的"),a("code",[t._v("dep.depend()")]),t._v("进行依赖收集")]),t._v(" "),a("li",[t._v("如果是数组中嵌套着数组，通过调用"),a("code",[t._v("dependArray")]),t._v("方法，遍历数组每一项，调用"),a("code",[t._v("__ob__")]),t._v("的"),a("code",[t._v("dep.depend")]),t._v("方法，进行依赖收集，再递归调用"),a("code",[t._v("dependArray")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("depend")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("blockquote",[a("p",[t._v("数组触发更新")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t对于数组的响应式处理，是通过重写数组的七个方法进行处理的，只需要在重写的方法中，再调用数组本身的"),a("code",[t._v("dep.notify")]),t._v("方法。")])]),a("h2",{attrs:{id:"_38-vue的响应式原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-vue的响应式原理"}},[t._v("#")]),t._v(" 38. vue的响应式原理")]),t._v(" "),a("ol",[a("li",[t._v("默认vue在初始化的时候，会对对象每个属性都进行劫持，增加dep属性，当取值的时候会做依赖收集")]),t._v(" "),a("li",[t._v("默认还会对属性值是对象和 数组的本身进行增加dep属性，进行依赖收集")]),t._v(" "),a("li",[t._v("如果属性变化，触发属性对应的dep去更新")]),t._v(" "),a("li",[t._v("如果是数组更新，触发数组的本身的dep 进行更新")]),t._v(" "),a("li",[t._v("如果取值的时候是数组还要让数组中的对象类型也进行依赖收集（递归依赖收集）")]),t._v(" "),a("li",[t._v("如果数组里面放对象，默认对象里的属性是会进行依赖收集的，因为在取值时，会进行"),a("code",[t._v("JSON.stringify")]),t._v("操作。")])]),t._v(" "),a("h2",{attrs:{id:"_39-vue中的生命周期是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-vue中的生命周期是如何实现的"}},[t._v("#")]),t._v(" 39. vue中的生命周期是如何实现的？")]),t._v(" "),a("h2",{attrs:{id:"_40-vue-mixin方法的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-vue-mixin方法的实现"}},[t._v("#")]),t._v(" 40 Vue.mixin方法的实现？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[a("code",[t._v("Vue.mixin")]),t._v(":全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mixin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("mixin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 合并选项 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("​\t通过"),a("code",[t._v("mergeOptions")]),t._v("将传入的"),a("code",[t._v("mixin")]),t._v("对象与"),a("code",[t._v("this.options")]),t._v("合并，然后将合并后的新对象作为"),a("code",[t._v("this.options")]),t._v("传给之后的所有"),a("code",[t._v("Vue")]),t._v("实例")]),t._v(" "),a("h2",{attrs:{id:"_41-vue中声明周期如何触发钩子函数-callhook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-vue中声明周期如何触发钩子函数-callhook"}},[t._v("#")]),t._v(" 41. vue中声明周期如何触发钩子函数 "),a("code",[t._v("callHook")])]),t._v(" "),a("blockquote",[a("p",[t._v("简易版的实现")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" handlers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    handlers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" handlers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生命周期的this永远指向实例")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ol",[a("li",[t._v("先在"),a("code",[t._v("vm.$options")]),t._v("找到对应的钩子函数")]),t._v(" "),a("li",[t._v("然后通过"),a("code",[t._v("forEach")]),t._v("循环调用")])]),t._v(" "),a("h2",{attrs:{id:"_42-vue-diff算法如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-vue-diff算法如何实现"}},[t._v("#")]),t._v(" 42. vue Diff算法如何实现？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t通过"),a("code",[t._v("patch(oldVnode, newVnode)")]),t._v("，比对两个虚拟节点的差异，更新需要更新的地方。")]),t._v(" "),a("p",[t._v("​\t当"),a("code",[t._v("oldVnode")]),t._v("是真实元素，实际走的是一个初始化流程，否则才走diff算法流程")])]),a("ol",[a("li",[t._v("通过调用"),a("code",[t._v("sameVnode")]),t._v("方法，判断新旧节点的"),a("code",[t._v("key")]),t._v("和"),a("code",[t._v("tag")]),t._v("值，判断是否是同一个节点")])]),t._v(" "),a("h2",{attrs:{id:"_43-diff算法中有啥性能问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-diff算法中有啥性能问题"}},[t._v("#")]),t._v(" 43. diff算法中有啥性能问题？")]),t._v(" "),a("p",[t._v("​\t因为diff只是同级的比对，但整颗diff树中，只有一个节点发生变化，需要递归整棵diff树进行比对，会有性能的损耗。")]),t._v(" "),a("p",[t._v("​\t而vue3中会把动态节点（做标记）抽离到一个数组中，当diff比对时，只需要对数组中的元素进行处理即可。")]),t._v(" "),a("h2",{attrs:{id:"_44-为什么用类来检测数据变化-而不是使用对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-为什么用类来检测数据变化-而不是使用对象"}},[t._v("#")]),t._v(" 44. 为什么用类来检测数据变化，而不是使用对象")]),t._v(" "),a("p",[t._v("​\t类具有类型，可以知道谁是谁的实例，而对象没有类型，如果需要知道一个对象有没有监控过，只需要看是否是Observer的实例即可，而且方便扩展")]),t._v(" "),a("h2",{attrs:{id:"_45-watch的deep原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-watch的deep原理"}},[t._v("#")]),t._v(" 45. watch的deep原理")]),t._v(" "),a("p",[t._v("​\twatch方法原理内部会通过创建一个"),a("code",[t._v("watcher")]),t._v("实例的方法，进行数据的依赖收集，当依赖变化的时候会调用用户传入的方法。")]),t._v(" "),a("p",[t._v("​\t当"),a("code",[t._v("deep")]),t._v("属性设置为"),a("code",[t._v("true")]),t._v("时，表示进行深度观察。只需要在创建"),a("code",[t._v("watcher")]),t._v("实例的时候把"),a("code",[t._v("obj")]),t._v("对象所有的值都递归读一遍，那么这个"),a("code",[t._v("watcher")]),t._v("实例就会被加到对象内所有值的依赖列表中，之后当对象任意某个值发生变化时就能得到通知。")])])}),[],!1,null,null,null);e.default=v.exports}}]);