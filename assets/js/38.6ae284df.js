(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{691:function(e,_,v){"use strict";v.r(_);var t=v(12),s=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"_1-对虚拟dom的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-对虚拟dom的理解"}},[e._v("#")]),e._v(" 1. 对虚拟DOM的理解")]),e._v(" "),v("p",[e._v("​\t虚拟DOM，就是用一个"),v("code",[e._v("JS")]),e._v("对象来描述一个"),v("code",[e._v("DOM")]),e._v("节点。把组成一个"),v("code",[e._v("DOM")]),e._v("节点的必要东西通过一个"),v("code",[e._v("JS")]),e._v("对象表示出来，那么这个"),v("code",[e._v("JS")]),e._v("对象就可以用来描述这个"),v("code",[e._v("DOM")]),e._v("节点，我们把这个"),v("code",[e._v("JS")]),e._v("对象就称为是这个真实"),v("code",[e._v("DOM")]),e._v("节点的虚拟"),v("code",[e._v("DOM")]),e._v("节点。")]),e._v(" "),v("div",{staticClass:"language-javascript line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("div "),v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"a"')]),e._v(" id"),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"b"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("我是内容"),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("div"),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("tag")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'div'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("        "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 元素标签")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("attrs")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("           "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 属性")]),e._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'a'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("id")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'b'")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("text")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'我是内容'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 文本内容")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("children")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("       "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 子元素")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br"),v("span",{staticClass:"line-number"},[e._v("6")]),v("br"),v("span",{staticClass:"line-number"},[e._v("7")]),v("br"),v("span",{staticClass:"line-number"},[e._v("8")]),v("br"),v("span",{staticClass:"line-number"},[e._v("9")]),v("br"),v("span",{staticClass:"line-number"},[e._v("10")]),v("br"),v("span",{staticClass:"line-number"},[e._v("11")]),v("br")])]),v("h2",{attrs:{id:"_2-虚拟dom的解析过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟dom的解析过程"}},[e._v("#")]),e._v(" 2. 虚拟DOM的解析过程")]),e._v(" "),v("p",[e._v("虚拟DOM的解析过程：")]),e._v(" "),v("ul",[v("li",[e._v("首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。")]),e._v(" "),v("li",[e._v("当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。")]),e._v(" "),v("li",[e._v("最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。")])]),e._v(" "),v("h2",{attrs:{id:"_3-为什么要用虚拟dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要用虚拟dom"}},[e._v("#")]),e._v(" 3. 为什么要用虚拟DOM")]),e._v(" "),v("p",[e._v("​\t在视图渲染之前，把写好的"),v("code",[e._v("template")]),e._v("模板先编译成"),v("code",[e._v("VNode")]),e._v("并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的"),v("code",[e._v("VNode")]),e._v("与前一次缓存下来的"),v("code",[e._v("VNode")]),e._v("进行对比，找出差异，然后有差异的"),v("code",[e._v("VNode")]),e._v("对应的真实"),v("code",[e._v("DOM")]),e._v("节点就是需要重新渲染的节点，最后根据有差异的"),v("code",[e._v("VNode")]),e._v("创建出真实的"),v("code",[e._v("DOM")]),e._v("节点再插入到视图中，最终完成一次视图更新。")]),e._v(" "),v("h2",{attrs:{id:"_4-虚拟dom真的比真实dom性能好吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟dom真的比真实dom性能好吗"}},[e._v("#")]),e._v(" 4. 虚拟DOM真的比真实DOM性能好吗？")]),e._v(" "),v("ul",[v("li",[e._v("首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。")]),e._v(" "),v("li",[e._v("正如它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。")])]),e._v(" "),v("h2",{attrs:{id:"_5-diff算法的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-diff算法的原理"}},[e._v("#")]),e._v(" 5. DIFF算法的原理")]),e._v(" "),v("p",[e._v("在新老虚拟DOM对比时：")]),e._v(" "),v("ul",[v("li",[e._v("首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换")]),e._v(" "),v("li",[e._v("如果为相同节点，进行patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)")]),e._v(" "),v("li",[e._v("比较如果都有子节点，则进行updateChildren，判断如何对这些新老节点的子节点进行操作（diff核心）。")]),e._v(" "),v("li",[e._v("匹配时，找到相同的子节点，递归比较子节点")])]),e._v(" "),v("p",[e._v("在diff中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从O(n3)降低值O(n)，也就是说，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。")]),e._v(" "),v("h2",{attrs:{id:"_6-vue中key的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue中key的作用"}},[e._v("#")]),e._v(" 6. Vue中key的作用")]),e._v(" "),v("p",[e._v("vue 中 key 值的作用可以分为两种情况来考虑：")]),e._v(" "),v("ul",[v("li",[e._v("第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。")]),e._v(" "),v("li",[e._v("第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。")])]),e._v(" "),v("p",[e._v("key 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速")]),e._v(" "),v("h2",{attrs:{id:"_7-为什么不建议用index作为key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-为什么不建议用index作为key"}},[e._v("#")]),e._v(" 7. 为什么不建议用index作为key?")]),e._v(" "),v("p",[e._v("​\t使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。")]),e._v(" "),v("h2",{attrs:{id:"_8-什么是diff算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是diff算法"}},[e._v("#")]),e._v(" 8. 什么是diff算法?")]),e._v(" "),v("p",[e._v("​\t"),v("code",[e._v("VNode")]),e._v("最大的用途就是在数据变化前后生成真实"),v("code",[e._v("DOM")]),e._v("对应的虚拟"),v("code",[e._v("DOM")]),e._v("节点，然后就可以对比新旧两份"),v("code",[e._v("VNode")]),e._v("，找出差异所在，然后更新有差异的"),v("code",[e._v("DOM")]),e._v("节点，最终达到以最少操作真实"),v("code",[e._v("DOM")]),e._v("更新视图的目的。而对比新旧两份"),v("code",[e._v("VNode")]),e._v("并找出差异的过程就是所谓的"),v("code",[e._v("DOM-Diff")]),e._v("过程。整个过程"),v("code",[e._v("patch")]),e._v("过程就是："),v("strong",[e._v("以新的VNode为基准，改造旧的oldVNode使之成为跟新的VNode一样，这就是patch过程要干的事")]),e._v("。")]),e._v(" "),v("p",[e._v("主要做以下三件事：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("创建节点")]),e._v("：新的"),v("code",[e._v("VNode")]),e._v("中有而旧的"),v("code",[e._v("oldVNode")]),e._v("中没有，就在旧的"),v("code",[e._v("oldVNode")]),e._v("中创建。")]),e._v(" "),v("li",[v("strong",[e._v("删除节点")]),e._v("：新的"),v("code",[e._v("VNode")]),e._v("中没有而旧的"),v("code",[e._v("oldVNode")]),e._v("中有，就从旧的"),v("code",[e._v("oldVNode")]),e._v("中删除。")]),e._v(" "),v("li",[v("strong",[e._v("更新节点")]),e._v("：新的"),v("code",[e._v("VNode")]),e._v("和旧的"),v("code",[e._v("oldVNode")]),e._v("中都有，就以新的"),v("code",[e._v("VNode")]),e._v("为准，更新旧的"),v("code",[e._v("oldVNode")]),e._v("。")])]),e._v(" "),v("h3",{attrs:{id:"_1-创建节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建节点"}},[e._v("#")]),e._v(" 1）创建节点")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203300857899.png",alt:"img"}})]),e._v(" "),v("p",[e._v("如果新vnode有，而旧vnode没有")]),e._v(" "),v("ul",[v("li",[e._v("判断是否为元素节点只需判断该"),v("code",[e._v("VNode")]),e._v("节点是否有"),v("code",[e._v("tag")]),e._v("标签即可。如果有"),v("code",[e._v("tag")]),e._v("属性即认为是元素节点，则调用"),v("code",[e._v("createElement")]),e._v("方法创建元素节点，通常元素节点还会有子节点，那就递归遍历创建所有子节点，将所有子节点创建好之后"),v("code",[e._v("insert")]),e._v("插入到当前元素节点里面，最后把当前元素节点插入到"),v("code",[e._v("DOM")]),e._v("中。")]),e._v(" "),v("li",[e._v("判断是否为注释节点，只需判断"),v("code",[e._v("VNode")]),e._v("的"),v("code",[e._v("isComment")]),e._v("属性是否为"),v("code",[e._v("true")]),e._v("即可，若为"),v("code",[e._v("true")]),e._v("则为注释节点，则调用"),v("code",[e._v("createComment")]),e._v("方法创建注释节点，再插入到"),v("code",[e._v("DOM")]),e._v("中。")]),e._v(" "),v("li",[e._v("如果既不是元素节点，也不是注释节点，那就认为是文本节点，则调用"),v("code",[e._v("createTextNode")]),e._v("方法创建文本节点，再插入到"),v("code",[e._v("DOM")]),e._v("中。")])]),e._v(" "),v("h3",{attrs:{id:"_2-删除节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-删除节点"}},[e._v("#")]),e._v(" 2）删除节点")]),e._v(" "),v("p",[e._v("​\t如果某些节点再新的"),v("code",[e._v("VNode")]),e._v("中没有而在旧的"),v("code",[e._v("oldVNode")]),e._v("中有，那么就需要把这些节点从旧的"),v("code",[e._v("oldVNode")]),e._v("中删除。删除节点非常简单，只需在要删除节点的父元素上调用"),v("code",[e._v("removeChild")]),e._v("方法即可。")]),e._v(" "),v("h3",{attrs:{id:"_3-更新节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-更新节点"}},[e._v("#")]),e._v(" 3）更新节点")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/ljcdzh/my_pic/raw/master/img/202203300902595.png",alt:"img"}})]),e._v(" "),v("h2",{attrs:{id:"_9-diff算法中新旧都有子节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-diff算法中新旧都有子节点"}},[e._v("#")]),e._v(" 9. diff算法中新旧都有子节点")]),e._v(" "),v("p",[e._v("​\t把"),v("code",[e._v("newChildren")]),e._v("里面的元素与"),v("code",[e._v("oldChildren")]),e._v("里的元素一一进行对比，对比两个子节点数组肯定是要通过循环，外层循环"),v("code",[e._v("newChildren")]),e._v("数组，内层循环"),v("code",[e._v("oldChildren")]),e._v("数组，每循环外层"),v("code",[e._v("newChildren")]),e._v("数组里的一个子节点，就去内层"),v("code",[e._v("oldChildren")]),e._v("数组里找看有没有与之相同的子节点。")]),e._v(" "),v("p",[e._v("以上过程有以下四种情况")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("创建子节点")]),e._v(" "),v("p",[e._v("如果"),v("code",[e._v("newChildren")]),e._v("里面的某个子节点在"),v("code",[e._v("oldChildren")]),e._v("里找不到与之相同的子节点，那么说明"),v("code",[e._v("newChildren")]),e._v("里面的这个子节点是之前没有的，是需要此次新增的节点，那么就创建子节点。")])]),e._v(" "),v("li",[v("p",[e._v("删除子节点")]),e._v(" "),v("p",[e._v("如果把"),v("code",[e._v("newChildren")]),e._v("里面的每一个子节点都循环完毕后，发现在"),v("code",[e._v("oldChildren")]),e._v("还有未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。")])]),e._v(" "),v("li",[v("p",[e._v("移动子节点")]),e._v(" "),v("p",[e._v("如果"),v("code",[e._v("newChildren")]),e._v("里面的某个子节点在"),v("code",[e._v("oldChildren")]),e._v("里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以"),v("code",[e._v("newChildren")]),e._v("里子节点的位置为基准，调整"),v("code",[e._v("oldChildren")]),e._v("里该节点的位置，使之与在"),v("code",[e._v("newChildren")]),e._v("里的位置相同。")])]),e._v(" "),v("li",[v("p",[e._v("更新节点")]),e._v(" "),v("p",[e._v("如果"),v("code",[e._v("newChildren")]),e._v("里面的某个子节点在"),v("code",[e._v("oldChildren")]),e._v("里找到了与之相同的子节点，并且所处的位置也相同，那么就更新"),v("code",[e._v("oldChildren")]),e._v("里该节点，使之与"),v("code",[e._v("newChildren")]),e._v("里的该节点相同。")])])])])}),[],!1,null,null,null);_.default=s.exports}}]);