(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{727:function(_,t,v){"use strict";v.r(t);var a=v(12),s=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-tcp头格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp头格式"}},[_._v("#")]),_._v(" 1. TCP头格式")]),_._v(" "),v("blockquote",[v("p",[_._v("TCP头部格式")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080741087.png",alt:"TCP 头格式"}})]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("序列号")]),_._v("： 在建立连接时由计算机生成的随机数作为其初始值。用来解决网络包乱序问题。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("确认应答号")]),_._v("： 指下次期望收到的数据的序列号，发送端收到后可以认为这个序列号之前的数据被正常接收，用来解决丢包问题。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("控制位")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ACK")]),_._v(": 该位为1时，确认应答的字段变为有效")]),_._v(" "),v("li",[v("code",[_._v("RST")]),_._v(":该位为1时，表示TCP连接中出现异常必须强制断开连接")]),_._v(" "),v("li",[v("code",[_._v("SYN")]),_._v(":该位为1时，表示希望建立连接")]),_._v(" "),v("li",[v("code",[_._v("FIN")]),_._v(": 该位为1时，表示希望断开连接")])])])]),_._v(" "),v("h2",{attrs:{id:"_2-为什么需要tcp协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么需要tcp协议"}},[_._v("#")]),_._v(" 2. 为什么需要TCP协议？")]),_._v(" "),v("p",[v("strong",[_._v("结论")]),_._v("： 保障网络数据包的可靠性")]),_._v(" "),v("p",[_._v("​\t"),v("code",[_._v("IP")]),_._v(" 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。")]),_._v(" "),v("p",[_._v("​\t如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 "),v("code",[_._v("TCP")]),_._v(" 协议来负责。")]),_._v(" "),v("h2",{attrs:{id:"_3-什么是tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是tcp"}},[_._v("#")]),_._v(" 3. 什么是TCP？")]),_._v(" "),v("p",[_._v("TCP是面向连接的、可靠的、基于字节流的传输层通信协议。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("面向连接")]),_._v("：表示一对一连接")]),_._v(" "),v("li",[v("strong",[_._v("可靠的")]),_._v("：保证一个报文一定能够到达接收端")]),_._v(" "),v("li",[v("strong",[_._v("字节流")]),_._v("：消息没有边界，并且消息是有序的。")])]),_._v(" "),v("h2",{attrs:{id:"_4-什么是tcp连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是tcp连接"}},[_._v("#")]),_._v(" 4. 什么是TCP连接？")]),_._v(" "),v("blockquote",[v("p",[_._v("连接的定义")])]),_._v(" "),v("p",[v("strong",[_._v("连接")]),_._v("： 用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括socket、序列号和窗口大小称为连接")]),_._v(" "),v("blockquote",[v("p",[_._v("建立一个TCP的三个条件")])]),_._v(" "),v("ul",[v("li",[_._v("Socket: 由IP地址和端口号组成")]),_._v(" "),v("li",[_._v("序列号：用来解决乱序问题等")]),_._v(" "),v("li",[_._v("窗口大小：用来做流量控制")])]),_._v(" "),v("h2",{attrs:{id:"_5-如何确定一个tcp连接呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何确定一个tcp连接呢"}},[_._v("#")]),_._v(" 5. 如何确定一个TCP连接呢？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080821293.png",alt:"TCP 四元组"}})]),_._v(" "),v("ul",[v("li",[v("p",[_._v("源地址和目的地址的字段（32位）是在 IP 头部中，作用是通过 IP 协议发送报文给对方主机。")])]),_._v(" "),v("li",[v("p",[_._v("源端口和目的端口的字段（16位）是在 TCP 头部中，作用是告诉 TCP 协议应该把报文发给哪个进程。")])])]),_._v(" "),v("h2",{attrs:{id:"_6-有一个ip的服务器监听了一个端口-它的tcp的最大连接数是多少"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-有一个ip的服务器监听了一个端口-它的tcp的最大连接数是多少"}},[_._v("#")]),_._v(" 6. 有一个IP的服务器监听了一个端口，它的TCP的最大连接数是多少？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080823602.png",alt:"img"}})]),_._v(" "),v("blockquote",[v("p",[_._v("IPv4")])]),_._v(" "),v("p",[_._v("IP数： "),v("code",[_._v("2^32")])]),_._v(" "),v("p",[_._v("端口数： "),v("code",[_._v("2^16")])]),_._v(" "),v("p",[_._v("最大TCP连接数： "),v("code",[_._v("2^48")])]),_._v(" "),v("blockquote",[v("p",[_._v("受限")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("文件描述符")]),_._v("： 每个TCP连接都是一个文件，如果文件描述符被占满了 ，会发生"),v("code",[_._v("too many open files")])]),_._v(" "),v("li",[v("strong",[_._v("内存限制")]),_._v("： 每个TCP连接都占用一定的内存，而操作系统的内存有限，如果内存资源被占满会发生OOM（内存泄漏）。")])]),_._v(" "),v("h2",{attrs:{id:"_7-udp头部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-udp头部格式"}},[_._v("#")]),_._v(" 7. UDP头部格式")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080831792.png",alt:"UDP 头部格式"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("目标和源端口")]),_._v("： 主要告诉UDP协议应该把报文发给哪个进程")]),_._v(" "),v("li",[v("strong",[_._v("包长度")]),_._v("： 该字段保存了UDP首部的长度和数据的长度之和")]),_._v(" "),v("li",[v("strong",[_._v("校验和")]),_._v("： 防止收到的网络传输中受损的UDP包")])]),_._v(" "),v("h2",{attrs:{id:"_8-udp与tcp的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-udp与tcp的区别"}},[_._v("#")]),_._v(" 8. UDP与TCP的区别")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}}),_._v(" "),v("th",{staticStyle:{"text-align":"center"}},[_._v("TCP")]),_._v(" "),v("th",{staticStyle:{"text-align":"center"}},[_._v("UDP")])])]),_._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("连接")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("传输数据前先建立连接")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("不需要连接，即刻传输数据")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("服务对象")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("一对一，两个端点")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("一对一、一对多、多对多")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("可靠性")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("可靠交付数据")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("尽最大努力交付，不保证可靠")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("拥塞控制、流量控制")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("具有，保证数据传输的安全")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("没有")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("首部开销")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("没有使用选项时，20字节，开销大")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("8字节，长度固定不变，开销小")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("传输方式")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("流式传输，没有边界，但保证顺序和可靠")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("一个一个包发送，有边界，但可能会丢包和乱序")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("分片不同")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("大于MSS大小，会进行分片，中途丢失，只需传输丢失的分片")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("大于MTU，会进行分片")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("应用场景")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[v("code",[_._v("FTP")]),_._v("文件传输、HTTPS")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("包总量较少的通信"),v("code",[_._v("DNS")]),_._v("、视频、音频等多媒体通信、广播通信")])])])]),_._v(" "),v("h2",{attrs:{id:"_9-为什么tcp具有首部字段-而udp没有"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-为什么tcp具有首部字段-而udp没有"}},[_._v("#")]),_._v(" 9. 为什么TCP具有首部字段，而UDP没有")]),_._v(" "),v("p",[_._v("因为TCP有可变长字段——选项，而UDP首部长度不变，无需多一个字段记录UDP首部长度")]),_._v(" "),v("h2",{attrs:{id:"_10-为什么udp头部有包长度字段-而tcp没有呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-为什么udp头部有包长度字段-而tcp没有呢"}},[_._v("#")]),_._v(" 10. 为什么UDP头部有包长度字段，而TCP没有呢？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080901738.png",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("因为为了网络设备硬件设计和处理方便，首部长度需要"),v("code",[_._v("4")]),_._v("字节的整数倍")])]),_._v(" "),v("h2",{attrs:{id:"_11-tcp三次握手过程和状态变迁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-tcp三次握手过程和状态变迁"}},[_._v("#")]),_._v(" 11. TCP三次握手过程和状态变迁")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204080904421.png",alt:"TCP 三次握手"}})]),_._v(" "),v("ol",[v("li",[_._v("一开始，客户端和服务端处于"),v("code",[_._v("ClOSED")]),_._v("状态。先是服务端主动监听某个端口，处于"),v("code",[_._v("LISTEN")]),_._v("状态")]),_._v(" "),v("li",[_._v("客户端会随机初始化序列号"),v("code",[_._v("client_isn")]),_._v("，将该序号置于TCP首部的[序号]字段中，同时把"),v("code",[_._v("SYN")]),_._v("标志位置为1，表示"),v("code",[_._v("SYN")]),_._v("报文。然后把SYN包发送给服务端，之后客户端处于"),v("code",[_._v("SYN—SENT")]),_._v("状态")]),_._v(" "),v("li",[_._v("服务端收到客户端的"),v("code",[_._v("SYN")]),_._v("报文后，首先服务端也随机初始化自己的序号"),v("code",[_._v("server_isn")]),_._v("， 将此序号填入TCP首部的[序号]字段中，其次把TCP首部的[确认应答号]字段填入"),v("code",[_._v("client_isn + 1")]),_._v(", 接着把"),v("code",[_._v("SYN")]),_._v("和"),v("code",[_._v("ACK")]),_._v("标志位置为"),v("code",[_._v("1")]),_._v("。最后把报文发给客户端，之后服务端处于"),v("code",[_._v("SYN_REVD")]),_._v("状态")]),_._v(" "),v("li",[_._v("客户端收到服务端报文后，还要向服务端回应最后一个应答报文，ACK置为1，确认应答号填入"),v("code",[_._v("server_isn + 1")]),_._v("，发送报文给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于"),v("code",[_._v("ESTABLISHED")]),_._v("状态。")]),_._v(" "),v("li",[_._v("服务器收到客户端的应答报文后，也进入"),v("code",[_._v("ESTABLED")]),_._v("状态。")])]),_._v(" "),v("h2",{attrs:{id:"_12-为什么是三次握手-不是两次-四次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-为什么是三次握手-不是两次-四次"}},[_._v("#")]),_._v(" 12. 为什么是三次握手？不是两次？四次？")]),_._v(" "),v("p",[_._v("TCP 建立连接时，通过三次握手"),v("strong",[_._v("能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号")]),_._v("。序列号能够保证数据包不重复、不丢弃和按序传输。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("两次握手")]),_._v("： 无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号。")]),_._v(" "),v("li",[v("strong",[_._v("四次握手")]),_._v("：三次握手就可以理论上最少可靠连接建立，所以不需要使用更多的通讯次数。")])]),_._v(" "),v("blockquote",[v("p",[_._v("防止历史连接的建立")])]),_._v(" "),v("p",[_._v("场景：客户端连续发送多个SYN建立连接的报文，在网络拥堵的情况下：")]),_._v(" "),v("ul",[v("li",[_._v("一个「旧 SYN 报文」比「最新的 SYN 」 报文早到达了服务端；")]),_._v(" "),v("li",[_._v("那么此时服务端就会回一个 "),v("code",[_._v("SYN + ACK")]),_._v(" 报文给客户端；")]),_._v(" "),v("li",[_._v("客户端收到后可以根据自身的上下文，判断这是一个历史连接（序列号过期或超时），那么客户端就会发送 "),v("code",[_._v("RST")]),_._v(" 报文给服务端，表示中止这一次连接。")])]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("在两次握手的情况下，[被动发起方]没有中间状态给[主动发起方]来阻止历史连接，导致[被动发起方]可能建立一个历史连接，造成资源浪费。")])]),_._v(" "),v("blockquote",[v("p",[_._v("同步双方初始序列号")])]),_._v(" "),v("p",[_._v("TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：")]),_._v(" "),v("ul",[v("li",[_._v("接收方可以去除重复的数据；")]),_._v(" "),v("li",[_._v("接收方可以根据数据包的序列号按序接收；")]),_._v(" "),v("li",[_._v("可以标识发送出去的数据包中， 哪些是已经被对方收到的（通过 ACK 报文中的序列号知道）；")])]),_._v(" "),v("p",[_._v("两次握手只保证了一方的初始化序列号能被对方成功接收，没法保证双方的初始序列号都能被确认接收。")]),_._v(" "),v("blockquote",[v("p",[_._v("避免资源浪费")])]),_._v(" "),v("p",[_._v("如果客户端的"),v("code",[_._v("SYN")]),_._v("阻塞了，重复发送多次"),v("code",[_._v("SYN")]),_._v("报文，那么服务器在收到请求后就会建立多个冗余的无效连接，造成不必要的资源浪费")]),_._v(" "),v("h2",{attrs:{id:"_13-为什么每次建立tcp连接时-初始化的序列号都要求不一样呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-为什么每次建立tcp连接时-初始化的序列号都要求不一样呢"}},[_._v("#")]),_._v(" 13. 为什么每次建立TCP连接时，初始化的序列号都要求不一样呢？")]),_._v(" "),v("ul",[v("li",[_._v("如果每次建立连接，客户端和服务端的初始化序列号都一样的化，很容易出现历史报文被下一个相同的四元组的连接接收的问题。")]),_._v(" "),v("li",[_._v("为了安全性，防止黑客伪造的相同序号的TCP报文被对方接收")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204081403047.png",alt:"img"}})]),_._v(" "),v("h2",{attrs:{id:"_14-初始序列号的isn是如何随机产生的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-初始序列号的isn是如何随机产生的"}},[_._v("#")]),_._v(" 14. 初始序列号的ISN是如何随机产生的？")]),_._v(" "),v("p",[_._v("初始化序列号随机生成算法： ISN = M + F")]),_._v(" "),v("ul",[v("li",[_._v("M是一个计时器，这个计时器"),v("strong",[_._v("每隔4微秒+1")])]),_._v(" "),v("li",[_._v("F是一个Hash算法，根据"),v("strong",[_._v("源IP、目的IP、源端口、目的端口")]),_._v("生成一个随机数。")])]),_._v(" "),v("h2",{attrs:{id:"_15-mtu和mss"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-mtu和mss"}},[_._v("#")]),_._v(" 15. MTU和MSS")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204081414268.png",alt:"MTU 与 MSS"}})]),_._v(" "),v("ul",[v("li",[v("code",[_._v("MTU")]),_._v(": 一个网络包的最大长度，以太网中一般为"),v("code",[_._v("1500")]),_._v("字节")]),_._v(" "),v("li",[v("code",[_._v("MSS")]),_._v("： 除去IP和TCP头部之后，一个网络包所能容纳的TCP数据最大的长度。")])]),_._v(" "),v("h2",{attrs:{id:"_16-既然ip层会分片-为什么tcp层还需mss呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-既然ip层会分片-为什么tcp层还需mss呢"}},[_._v("#")]),_._v(" 16. 既然IP层会分片，为什么TCP层还需MSS呢？")]),_._v(" "),v("blockquote",[v("p",[_._v("如果直接将整个报文传给IP")])]),_._v(" "),v("p",[_._v("​\t当一个数据超过MTU后，IP会对数据进行分片，如果一个分片丢失，整个IP报文的所有分片都得重传。")]),_._v(" "),v("blockquote",[v("p",[_._v("如果由TCP负责超时重传")])]),_._v(" "),v("p",[_._v("​\t当接收方发现TCP报文的某一片丢失后，则不会响应ACK给对方，那么发送方的TCP在超时后，就会重发整个TCP报文")]),_._v(" "),v("h2",{attrs:{id:"_17-第一次握手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-第一次握手丢失了-会发生什么"}},[_._v("#")]),_._v(" 17. 第一次握手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("如果第一次握手丢失了，也就是说客户端迟迟收不到服务端的SYN-ACK报文（第二次握手），就会触发[ "),v("strong",[_._v("超时重传")]),_._v(" ]机制，重传SYN报文。而且每次超时的时间是上一次的两倍。")]),_._v(" "),v("h2",{attrs:{id:"_18-第二次握手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-第二次握手丢失了-会发生什么"}},[_._v("#")]),_._v(" 18. 第二次握手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("由于第二次握手丢失：")]),_._v(" "),v("ul",[v("li",[_._v("客户端迟迟没有收到第二次握手，客户端认为是自己的SYN报文丢失，于是"),v("strong",[_._v("客户端就会触发超时重传机制，重传SYN报文")])]),_._v(" "),v("li",[_._v("由于服务端迟迟没有收到第三次握手，于是"),v("strong",[_._v("服务端这边会触发超时重传机制，重传SYN-ACK报文。")])])]),_._v(" "),v("h2",{attrs:{id:"_19-第三次握手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-第三次握手丢失了-会发生什么"}},[_._v("#")]),_._v(" 19. 第三次握手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("​\t如果第三次握手丢失了，服务端迟迟没有收到确认报文，就触发超时重传机制，"),v("strong",[_._v("重传SYN-ACK报文")]),_._v("，直到收到第三次握手，或者达到最大重传机制。")]),_._v(" "),v("h2",{attrs:{id:"_20-tcp四次握手过程和状态变迁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-tcp四次握手过程和状态变迁"}},[_._v("#")]),_._v(" 20. TCP四次握手过程和状态变迁")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204082301380.png",alt:"客户端主动关闭连接 —— TCP 四次挥手"}})]),_._v(" "),v("ul",[v("li",[_._v("客户端打算关闭连接，此时会发送一个TCP首部FIN标志位被置为1的报文，之后客户端进入"),v("code",[_._v("FIN_WAIT_1")]),_._v("状态")]),_._v(" "),v("li",[_._v("服务端收到该报文后，就向客户端发送"),v("code",[_._v("ACK")]),_._v("应答报文，接着服务端进入"),v("code",[_._v("CLOSED_WAIT")]),_._v("状态。")]),_._v(" "),v("li",[_._v("客户端收到服务端的"),v("code",[_._v("ACK")]),_._v("应答报文后，之后进入"),v("code",[_._v("FIN_WAIT_2")]),_._v("状态。")]),_._v(" "),v("li",[_._v("等待服务端处理完数据后，也向客户端发送"),v("code",[_._v("FIN")]),_._v("报文，之后服务端进入"),v("code",[_._v("LAST_ACK")]),_._v("状态。")]),_._v(" "),v("li",[_._v("客户端收到服务端的"),v("code",[_._v("FIN")]),_._v("报文后，回一个"),v("code",[_._v("ACK")]),_._v("应答报文，之后进入"),v("code",[_._v("TIME_WAIT")]),_._v("状态。")]),_._v(" "),v("li",[_._v("服务端收到了"),v("code",[_._v("ACK")]),_._v("应答报文后，就进入"),v("code",[_._v("CLOSED")]),_._v("状态，至此服务端已经完成连接的关闭。")]),_._v(" "),v("li",[_._v("客户端在经过"),v("code",[_._v("2MSL")]),_._v("一段时间后，自动进入"),v("code",[_._v("CLOSED")]),_._v("，至此客户端完成连接 的关闭。")])]),_._v(" "),v("h2",{attrs:{id:"_21-为什么挥手需要四次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_21-为什么挥手需要四次"}},[_._v("#")]),_._v(" 21. 为什么挥手需要四次？")]),_._v(" "),v("p",[_._v("​\t服务端通常需要等待完成数据的发送和处理，所以服务端的"),v("code",[_._v("ACK")]),_._v("和"),v("code",[_._v("FIN")]),_._v("一般都会分开发送，从而比三次握手导致多了一次。")]),_._v(" "),v("h2",{attrs:{id:"_22-第一次挥手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_22-第一次挥手丢失了-会发生什么"}},[_._v("#")]),_._v(" 22. 第一次挥手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("​\t如果第一次挥手丢失了，那么客户端迟迟收不到被动方的ACK的话，也就会触发超时重传机制，重传FIN报文。一旦超过重传的次数，就不会发送FIN报文，直接进入到"),v("code",[_._v("CLOSE")]),_._v("状态。")]),_._v(" "),v("h2",{attrs:{id:"_23-第二次挥手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_23-第二次挥手丢失了-会发生什么"}},[_._v("#")]),_._v(" 23. 第二次挥手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("​\t如果服务端的第二次挥手丢失了，客户端就会触发超时重传机制，重传"),v("code",[_._v("FIN")]),_._v("报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。")]),_._v(" "),v("h2",{attrs:{id:"_24-第三次挥手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_24-第三次挥手丢失了-会发生什么"}},[_._v("#")]),_._v(" 24. 第三次挥手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("​\t如果服务端的第三次挥手丢失了，也就是说服务端迟迟没有收到客户端的"),v("code",[_._v("ACK")]),_._v("报文，服务端就会重发"),v("code",[_._v("FIN")]),_._v("报文。")]),_._v(" "),v("h2",{attrs:{id:"_25-第四次挥手丢失了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_25-第四次挥手丢失了-会发生什么"}},[_._v("#")]),_._v(" 25. 第四次挥手丢失了，会发生什么？")]),_._v(" "),v("p",[_._v("如果第四次挥手丢失了，也就是服务端迟迟没有收到对应的"),v("code",[_._v("ACK")]),_._v("报文，服务端就会重发"),v("code",[_._v("FIN")]),_._v("a报文。")]),_._v(" "),v("h2",{attrs:{id:"_26-msl是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_26-msl是什么"}},[_._v("#")]),_._v(" 26. MSL是什么？")]),_._v(" "),v("p",[_._v("​\tMSL， 报文最大生存时间，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。")]),_._v(" "),v("h2",{attrs:{id:"_27-为什么time-wait等待的时间是2msl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_27-为什么time-wait等待的时间是2msl"}},[_._v("#")]),_._v(" 27.  为什么TIME_WAIT等待的时间是2MSL？")]),_._v(" "),v("p",[_._v("​\t\t网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以一来一回需要等待2倍的时间。")]),_._v(" "),v("p",[_._v("​\t\t比如，如果被动关闭方没有收到断开连接的最后的ACK报文，就会触发超时重发"),v("code",[_._v("FIN")]),_._v("报文，另一方接收到FIN后，会重发ACK给被动关闭方，一来一去正好2个MSL。")]),_._v(" "),v("h2",{attrs:{id:"_28-为什么需要time-wait状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_28-为什么需要time-wait状态"}},[_._v("#")]),_._v(" 28. 为什么需要"),v("code",[_._v("TIME_WAIT")]),_._v("状态？")]),_._v(" "),v("p",[_._v("主动发起关闭连接的一方，才会有"),v("code",[_._v("TIME_WAIT")]),_._v("状态。")]),_._v(" "),v("p",[_._v("需要TIME_WAIT状态，主要是两个原因：")]),_._v(" "),v("ul",[v("li",[_._v("防止历史连接中的数据，被后面相同四元组的连接错误的接收；")]),_._v(" "),v("li",[_._v("保证[ 被动关闭连接  ] 的一方，能被正确地关闭。")])]),_._v(" "),v("h2",{attrs:{id:"_29-time-wait过多有什么危害"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_29-time-wait过多有什么危害"}},[_._v("#")]),_._v(" 29. TIME_WAIT过多有什么危害？")]),_._v(" "),v("ul",[v("li",[_._v("内存资源占用；")]),_._v(" "),v("li",[_._v("对端口资源的占用，一个TCP连接至少消耗 [ 发起连接方 ] 的一个本地端口。当占满了所有的端口资源，则会导致无法创建新连接。")])]),_._v(" "),v("h2",{attrs:{id:"_30-如果建立了连接-但是客户端突然出现故障了怎么办"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_30-如果建立了连接-但是客户端突然出现故障了怎么办"}},[_._v("#")]),_._v(" 30. 如果建立了连接，但是客户端突然出现故障了怎么办？")]),_._v(" "),v("p",[_._v("TCP有一个"),v("strong",[_._v("保活机制")]),_._v("，机制原理：")]),_._v(" "),v("p",[_._v("​\t定义一个时间端，在这个时间段内，如果没有任何连接相关的活动，TCP保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前 的TCP连接已经死亡，系统内核将错误信息通知给上层应用程序。")]),_._v(" "),v("h2",{attrs:{id:"_31-如果已经建立了连接-但是客户端的进程崩溃会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_31-如果已经建立了连接-但是客户端的进程崩溃会发生什么"}},[_._v("#")]),_._v(" 31. 如果已经建立了连接，但是客户端的进程崩溃会发生什么？")]),_._v(" "),v("p",[_._v("​\t进程奔溃了，服务端会发送"),v("code",[_._v("FIN")]),_._v("报文，与客户端进行四次挥手。")]),_._v(" "),v("h2",{attrs:{id:"_32-tcp重传机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_32-tcp重传机制"}},[_._v("#")]),_._v(" 32. TCP重传机制")]),_._v(" "),v("p",[_._v("常见的重传机制：")]),_._v(" "),v("ul",[v("li",[_._v("超时重传")]),_._v(" "),v("li",[_._v("快速重传")]),_._v(" "),v("li",[_._v("SACK")]),_._v(" "),v("li",[_._v("D-SACK")])]),_._v(" "),v("h2",{attrs:{id:"_33-超时重传是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_33-超时重传是什么"}},[_._v("#")]),_._v(" 33. 超时重传是什么？")]),_._v(" "),v("p",[v("strong",[_._v("超时重传")]),_._v("： 在发送数据时，设定一个定时器，当超过指定时间后，没有收到对方的"),v("code",[_._v("ACK")]),_._v("确认应答报文后，就会重发该数据。")]),_._v(" "),v("p",[v("strong",[_._v("发生超时重传的情况")]),_._v("：")]),_._v(" "),v("ul",[v("li",[_._v("数据包丢失")]),_._v(" "),v("li",[_._v("确认应答丢失")])]),_._v(" "),v("p",[v("strong",[_._v("超时重传时间（RTO）设置")]),_._v("： RTO的值应该略大于报文往返RTT的值")]),_._v(" "),v("ul",[v("li",[_._v("如果较大： 重发就慢，没有效率，性能差")]),_._v(" "),v("li",[_._v("如果较小：没有丢就重发，会增加网络拥塞。")])]),_._v(" "),v("p",[v("strong",[_._v("重传策略")]),_._v("： 每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。")]),_._v(" "),v("h2",{attrs:{id:"_34-有了超时重传-为什么还要快速重传"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_34-有了超时重传-为什么还要快速重传"}},[_._v("#")]),_._v(" 34. 有了超时重传，为什么还要快速重传？")]),_._v(" "),v("p",[_._v("​\t超时重传存在的问题是，超时周期可能相对较长。如果想要更快的方式，就是快速重传。")]),_._v(" "),v("h2",{attrs:{id:"_35-快速重传是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_35-快速重传是什么"}},[_._v("#")]),_._v(" 35. 快速重传是什么？")]),_._v(" "),v("p",[v("strong",[_._v("快速重传机制")]),_._v("： 不以时间为驱动，而是以数据驱动重传。")]),_._v(" "),v("p",[v("strong",[_._v("工作方式")]),_._v("： 当收到三个相同的ACK报文时，会在定时器过期之前，重传丢失的片段。")]),_._v(" "),v("p",[v("strong",[_._v("问题")]),_._v("： 重传的时候，是重传之前的一个，还是重传所有的问题。")]),_._v(" "),v("p",[_._v("为了解决不知道该重传哪些TCP报文，于是就有了"),v("code",[_._v("SACK")]),_._v("方法。")]),_._v(" "),v("h2",{attrs:{id:"_36-sack方法是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_36-sack方法是什么"}},[_._v("#")]),_._v(" 36. SACK方法是什么？")]),_._v(" "),v("p",[v("strong",[_._v("SACK")]),_._v(" (选择性确认)： 在TCP头部【选项】字段里加一个"),v("code",[_._v("SACK")]),_._v("的字段，它"),v("strong",[_._v("可以缓存的map发送给发送方")]),_._v("，这样发送方就可以直到哪些数据收到了，哪些数据没有收到，直到这些信息后，就可以只"),v("strong",[_._v("重传丢失的数据")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"_37-什么是d-sack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_37-什么是d-sack"}},[_._v("#")]),_._v(" 37. 什么是"),v("code",[_._v("D-SACK")])]),_._v(" "),v("p",[v("code",[_._v("D-SACK")]),_._v(": 主要使用了SACK来告诉发送方有哪些数据被"),v("strong",[_._v("重复")]),_._v("接收了。")]),_._v(" "),v("p",[v("strong",[_._v("好处")]),_._v("：")]),_._v(" "),v("ul",[v("li",[_._v("可以让发送方知道是发出去的包丢了，还是接收方回应的ACK包丢了")]),_._v(" "),v("li",[_._v("可以知道是不是发送方的数据包被网络延迟了")]),_._v(" "),v("li",[_._v("可以知道网络中是不是把发送方的数据包赋值了")])]),_._v(" "),v("h2",{attrs:{id:"_38-为什么引入窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_38-为什么引入窗口"}},[_._v("#")]),_._v(" 38. 为什么引入窗口？")]),_._v(" "),v("p",[_._v("​\tTCP是每发送一个数据，都要进行一次确认应答。当上一个数据包收到应答后，再发送下一个。这样为每个数据包确认应答的缺点："),v("strong",[_._v("数据包的往返时间越长，通信效率就越低。")])]),_._v(" "),v("p",[_._v("​\t有了窗口后，就可以指定窗口大小，窗口大小就是指"),v("strong",[_._v("无需等待确认应答，而可以继续发送数据的最大值")]),_._v("。")]),_._v(" "),v("p",[_._v("​\t窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓存区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓冲区清除。")]),_._v(" "),v("h2",{attrs:{id:"_39-窗口大小由哪一方决定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_39-窗口大小由哪一方决定"}},[_._v("#")]),_._v(" 39. 窗口大小由哪一方决定？")]),_._v(" "),v("p",[_._v("TCP头里有一个字段叫"),v("code",[_._v("window")]),_._v("，也就是窗口大小。")]),_._v(" "),v("p",[_._v("​\t这个字段是接收端告"),v("strong",[_._v("诉发送端自己还有多少缓冲区可以接收数据")]),_._v("。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。")]),_._v(" "),v("p",[_._v("所以，通常窗口的大小是由"),v("strong",[_._v("接收方的窗口大小")]),_._v("来决定的。")]),_._v(" "),v("h2",{attrs:{id:"_40-接收窗口和发送窗口的大小是相等的吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_40-接收窗口和发送窗口的大小是相等的吗"}},[_._v("#")]),_._v(" 40.接收窗口和发送窗口的大小是相等的吗？")]),_._v(" "),v("p",[_._v("并不是完全相等，接收窗口的大小是约等于发送窗口的大小 。")]),_._v(" "),v("p",[_._v("因为滑动窗口动态的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。")]),_._v(" "),v("h2",{attrs:{id:"_41-发送方的滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_41-发送方的滑动窗口"}},[_._v("#")]),_._v(" 41. 发送方的滑动窗口")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204090956759.jpeg",alt:"img"}})]),_._v(" "),v("h2",{attrs:{id:"_42-接收方的滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_42-接收方的滑动窗口"}},[_._v("#")]),_._v(" 42. 接收方的滑动窗口")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204090957489.jpeg",alt:"接收窗口"}})]),_._v(" "),v("h2",{attrs:{id:"_43-为什么需要流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_43-为什么需要流量控制"}},[_._v("#")]),_._v(" 43. 为什么需要流量控制")]),_._v(" "),v("p",[_._v("​\t发送方不能无脑的发数据给接收方，要考虑接收方处理能力。否则，当对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。")]),_._v(" "),v("p",[_._v("所以，"),v("strong",[_._v("TCP提供了一种机制可以让发送方根据接收方的实际接收能力控制发送的数据量，这就是所谓的流量控制")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"_44-什么是窗口关闭"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_44-什么是窗口关闭"}},[_._v("#")]),_._v(" 44. 什么是窗口关闭？")]),_._v(" "),v("p",[_._v("​\t如果窗口大小为0时，就会阻止发送方给接收方传递数据，直到窗口变为非零为止，这就是窗口关闭。")]),_._v(" "),v("p",[_._v("​")]),_._v(" "),v("h2",{attrs:{id:"_45-窗口关闭的潜在问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_45-窗口关闭的潜在问题"}},[_._v("#")]),_._v(" 45. 窗口关闭的潜在问题")]),_._v(" "),v("p",[_._v("​\t当发生窗口关闭时，接收方处理完数据后，会向发送方通告一个窗口非0的ACK报文，如果通告窗口的ACK报文在网络中丢失了，会导致发送方一直等待接收方的非0窗口通知，接收方也一直等待发送方的数据，如果不采取措施，这样相互等待的过程，会造成死锁的现象。")]),_._v(" "),v("h2",{attrs:{id:"_46-tcp如何解决窗口关闭时-潜在的死锁现象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_46-tcp如何解决窗口关闭时-潜在的死锁现象"}},[_._v("#")]),_._v(" 46. TCP如何解决窗口关闭时，潜在的死锁现象？")]),_._v(" "),v("p",[_._v("​\t为了解决死锁现象，TCP为每个连接设有一个持续定时器，"),v("strong",[_._v("只要TCP连接 一方收到对方的零窗口通知，就会启动持续计时器")]),_._v("。")]),_._v(" "),v("p",[_._v("​\t如果持续计时器超时，就会发送"),v("strong",[_._v("窗口探测报文")]),_._v("，而对方在确认这个探测报文时，给出自己现在的接收窗口。")]),_._v(" "),v("p",[_._v("​\t探测窗口的次数一般为3次，每次大约30~60秒。如果三次过后接收窗口还是0的话，有的TCP实现就会发"),v("code",[_._v("RST")]),_._v("报文来中断连接。")]),_._v(" "),v("h2",{attrs:{id:"_47-什么是糊涂窗口综合症"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_47-什么是糊涂窗口综合症"}},[_._v("#")]),_._v(" 47. 什么是糊涂窗口综合症")]),_._v(" "),v("p",[_._v("​\t如果接收方太忙，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。")]),_._v(" "),v("p",[_._v("​\t到最后，"),v("strong",[_._v("如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症")]),_._v("。")]),_._v(" "),v("p",[_._v("所以，糊涂窗口综合症的现象发生在发送方和接收方：")]),_._v(" "),v("ul",[v("li",[_._v("接收方可以通告一个小窗口")]),_._v(" "),v("li",[_._v("而发送方可以发送小数据")])]),_._v(" "),v("h2",{attrs:{id:"_48-怎么让接收方不通告小窗口呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_48-怎么让接收方不通告小窗口呢"}},[_._v("#")]),_._v(" 48. 怎么让接收方不通告小窗口呢？")]),_._v(" "),v("p",[_._v("接收方通常的策略如下:")]),_._v(" "),v("p",[_._v("​\t当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 "),v("code",[_._v("0")]),_._v("，也就阻止了发送方再发数据过来。")]),_._v(" "),v("p",[_._v("​\t等到接收方处理了一些数据后，窗口大小 >= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。")]),_._v(" "),v("h2",{attrs:{id:"_49-怎么让发送方避免发送小数据呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_49-怎么让发送方避免发送小数据呢"}},[_._v("#")]),_._v(" 49. 怎么让发送方避免发送小数据呢？")]),_._v(" "),v("p",[_._v("发送方通常的策略:")]),_._v(" "),v("p",[_._v("使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：")]),_._v(" "),v("ul",[v("li",[_._v("要等到窗口大小 >= "),v("code",[_._v("MSS")]),_._v(" 或是 数据大小 >= "),v("code",[_._v("MSS")])]),_._v(" "),v("li",[_._v("收到之前发送数据的 "),v("code",[_._v("ack")]),_._v(" 回包")])]),_._v(" "),v("p",[_._v("只要没满足上面条件中的一条，发送方一直在囤积数据，直到满足上面的发送条件。")]),_._v(" "),v("h2",{attrs:{id:"_50-为什么要有拥塞控制-不是有流量控制了吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_50-为什么要有拥塞控制-不是有流量控制了吗"}},[_._v("#")]),_._v(" 50. 为什么要有拥塞控制？不是有流量控制了吗？")]),_._v(" "),v("p",[v("strong",[_._v("流量控制")]),_._v("： 避免发送方的数据填满接收方的缓存，但不知道网络中发生什么")]),_._v(" "),v("p",[v("strong",[_._v("拥塞控制")]),_._v("： 避免发送方的数据填满整个网络。")]),_._v(" "),v("p",[_._v("​\t在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包的时延、丢失等，这时TCP就会重传数据，但是一重传就会导致网络的负担更重，于是导致更大的延迟以及更多的丢包 ，这个情况就会进入恶性循环被不断地放大…")]),_._v(" "),v("h2",{attrs:{id:"_51-什么是拥塞窗口-和发送窗口有什么关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_51-什么是拥塞窗口-和发送窗口有什么关系"}},[_._v("#")]),_._v(" 51. 什么是拥塞窗口？和发送窗口有什么关系？")]),_._v(" "),v("p",[v("strong",[_._v("拥塞窗口cwnd")]),_._v(" ： 发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化。")]),_._v(" "),v("p",[v("strong",[_._v("发送窗口大小")]),_._v(" = min（"),v("strong",[_._v("接收窗口大小")]),_._v("， "),v("strong",[_._v("拥塞窗口大小")]),_._v(" ）")]),_._v(" "),v("p",[v("strong",[_._v("拥塞窗口大小变化规则")]),_._v("：")]),_._v(" "),v("ul",[v("li",[_._v("只要网络没有出现拥塞，窗口变大")]),_._v(" "),v("li",[_._v("网络出现拥塞，窗口变小")])]),_._v(" "),v("h2",{attrs:{id:"_52-怎么知道当前网络是否出现了拥塞了呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_52-怎么知道当前网络是否出现了拥塞了呢"}},[_._v("#")]),_._v(" 52. 怎么知道当前网络是否出现了拥塞了呢？")]),_._v(" "),v("p",[_._v("发生了超时重传，就会认为网络出现了拥塞")]),_._v(" "),v("h2",{attrs:{id:"_53-拥塞控制有哪些控制算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_53-拥塞控制有哪些控制算法"}},[_._v("#")]),_._v(" 53. 拥塞控制有哪些控制算法？")]),_._v(" "),v("p",[_._v("主要四个算法：")]),_._v(" "),v("ul",[v("li",[_._v("慢启动")]),_._v(" "),v("li",[_._v("拥塞避免")]),_._v(" "),v("li",[_._v("拥塞发生")]),_._v(" "),v("li",[_._v("快速恢复")])]),_._v(" "),v("h2",{attrs:{id:"_54-什么是慢启动"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_54-什么是慢启动"}},[_._v("#")]),_._v(" 54. 什么是慢启动")]),_._v(" "),v("p",[v("strong",[_._v("慢启动规则")]),_._v("： 当发送方"),v("strong",[_._v("每收到一个ACK")]),_._v(", 拥塞窗口cwnd的大小就会加"),v("strong",[_._v("1")]),_._v("。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091106459.jpeg",alt:"慢启动算法"}})]),_._v(" "),v("h2",{attrs:{id:"_55-慢启动涨到什么时候是个头呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_55-慢启动涨到什么时候是个头呢"}},[_._v("#")]),_._v(" 55. 慢启动涨到什么时候是个头呢？")]),_._v(" "),v("p",[_._v("慢启动门限"),v("code",[_._v("ssthresh")]),_._v("（slow start threshold）状态变量：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("cwnd")]),_._v(" < "),v("code",[_._v("ssthresh")]),_._v("时，使用慢启动算法。")]),_._v(" "),v("li",[v("code",[_._v("cwnd")]),_._v(" >= "),v("code",[_._v("ssthresh")]),_._v("时，使用拥塞避免算法。")])]),_._v(" "),v("h2",{attrs:{id:"_56-什么是拥塞避免算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_56-什么是拥塞避免算法"}},[_._v("#")]),_._v(" 56. 什么是拥塞避免算法")]),_._v(" "),v("p",[v("strong",[_._v("拥塞避免算法规则")]),_._v("： 每当收到一个ACK时，cwnd增加1 / cwnd。（线性增长）")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091114196.jpeg",alt:"拥塞避免"}})]),_._v(" "),v("h2",{attrs:{id:"_57-什么是拥塞发生算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_57-什么是拥塞发生算法"}},[_._v("#")]),_._v(" 57. 什么是拥塞发生算法？")]),_._v(" "),v("p",[_._v("当触发了重传机制，就会进入拥塞发生算法。")]),_._v(" "),v("blockquote",[v("p",[_._v("发生超时重传的拥塞发生算法")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ssthresh")]),_._v("设为"),v("code",[_._v("cwnd / 2")])]),_._v(" "),v("li",[v("code",[_._v("cwnd")]),_._v("重置为1")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091119323.jpeg",alt:"拥塞发送 —— 超时重传"}})]),_._v(" "),v("blockquote",[v("p",[_._v("发生快速重传的拥塞发生算法")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("cwnd = cwnd / 2")]),_._v(", 设置为原本的一半")]),_._v(" "),v("li",[v("code",[_._v("ssthresh = cwnd")]),_._v("；")]),_._v(" "),v("li",[_._v("进入快速恢复算法")])]),_._v(" "),v("h2",{attrs:{id:"_58-什么是快速恢复算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_58-什么是快速恢复算法"}},[_._v("#")]),_._v(" 58. 什么是快速恢复算法")]),_._v(" "),v("p",[_._v("快速恢复算法规则：")]),_._v(" "),v("ul",[v("li",[_._v("拥塞窗口"),v("code",[_._v("cwnd = ssthresh + 3")])]),_._v(" "),v("li",[_._v("重传丢失的数据包")]),_._v(" "),v("li",[_._v("如果再收到重复的ACK，那么cwnd  + 1")]),_._v(" "),v("li",[_._v("如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；")])]),_._v(" "),v("h2",{attrs:{id:"_59-什么是tcp半连接队列和全连接队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_59-什么是tcp半连接队列和全连接队列"}},[_._v("#")]),_._v(" 59. 什么是TCP半连接队列和全连接队列")]),_._v(" "),v("p",[_._v("在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：")]),_._v(" "),v("ul",[v("li",[_._v("半连接队列，也称 SYN 队列；")]),_._v(" "),v("li",[_._v("全连接队列，也称 accept 队列；")])]),_._v(" "),v("p",[_._v("​\t服务端收到客户端发起的 SYN 请求后，"),v("strong",[_._v("内核会把该连接存储到半连接队列")]),_._v("，并向客户端响应 SYN+ACK，接着客户端会返回 ACK，服务端收到第三次握手的 ACK 后，"),v("strong",[_._v("内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来。")])]),_._v(" "),v("p",[_._v("​\t不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接丢弃，或返回 RST 包。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091128377.jpeg",alt:"半连接队列与全连接队列"}})]),_._v(" "),v("h2",{attrs:{id:"_60-在没有开启tcp-keepalive-且双方一直没有数据交互的情况下-如果客户端的主机奔溃了-会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_60-在没有开启tcp-keepalive-且双方一直没有数据交互的情况下-如果客户端的主机奔溃了-会发生什么"}},[_._v("#")]),_._v(" 60. 在没有开启TCP keepalive，且双方一直没有数据交互的情况下，如果客户端的主机奔溃了，会发生什么？")]),_._v(" "),v("p",[_._v("​\t客户端主机奔溃了，服务端是无法感知的，再加上服务端没有开启TCP keepalive，又没有数据交互的情况下，服务端的TCP连接将会一直处于ESTABLISHED连接状态，直到服务端重启进程。")]),_._v(" "),v("h2",{attrs:{id:"_61-为什么udp是面向报文的协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_61-为什么udp是面向报文的协议"}},[_._v("#")]),_._v(" 61. 为什么UDP是面向报文的协议？")]),_._v(" "),v("p",[_._v("当用户消息通过UDP协议传输时，"),v("strong",[_._v("操作系统不会对消息进行拆分")]),_._v("，"),v("strong",[_._v("每个UDP就是一个用户消息的边界")]),_._v("。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091148801.png",alt:"图片"}})]),_._v(" "),v("h2",{attrs:{id:"_62-为什么tcp是面向字节流的协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_62-为什么tcp是面向字节流的协议"}},[_._v("#")]),_._v(" 62. 为什么TCP是面向字节流的协议？")]),_._v(" "),v("p",[_._v("当用户消息通过TCP协议传输时，"),v("strong",[_._v("消息可能会被操作系统分组成多个的TCP报文")]),_._v("，也就是"),v("strong",[_._v("一个完整的用户消息被拆分成多个TCP报文进行传输")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"_63-如何解决粘包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_63-如何解决粘包"}},[_._v("#")]),_._v(" 63. 如何解决粘包？")]),_._v(" "),v("h3",{attrs:{id:"_1-固定长度消息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-固定长度消息"}},[_._v("#")]),_._v(" 1） 固定长度消息")]),_._v(" "),v("p",[_._v("​\t即每个用户消息都是固定长度的，比如规定一个消息的长度是 64 个字节，当接收方接满 64 个字节，就认为这个内容是一个完整且有效的消息。")]),_._v(" "),v("h3",{attrs:{id:"_2-特殊字符作为边界"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-特殊字符作为边界"}},[_._v("#")]),_._v(" 2）特殊字符作为边界")]),_._v(" "),v("p",[_._v("​\t在两个用户消息之间插入一个特殊的字符串，这样接收方在接收数据时，读到了这个特殊字符，就把认为已经读完一个完整的消息。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/option-star/imgs/202204091159054.png",alt:"图片"}})]),_._v(" "),v("h3",{attrs:{id:"_3-自定义消息结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-自定义消息结构"}},[_._v("#")]),_._v(" 3） 自定义消息结构")]),_._v(" "),v("p",[_._v("我们可以自定义一个消息结构，由包头和数据组成，其中包头包是固定大小的，而且包头里有一个字段来说明紧随其后的数据有多大。")]),_._v(" "),v("p",[_._v("比如这个消息结构体，首先 4 个字节大小的变量来表示数据长度，真正的数据则在后面。")]),_._v(" "),v("div",{staticClass:"language-c line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-c"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("struct")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" \n    "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("u_int32_t")]),_._v(" message_length"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("char")]),_._v(" message_data"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v(" message"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br"),v("span",{staticClass:"line-number"},[_._v("3")]),v("br"),v("span",{staticClass:"line-number"},[_._v("4")]),v("br")])])])}),[],!1,null,null,null);t.default=s.exports}}]);